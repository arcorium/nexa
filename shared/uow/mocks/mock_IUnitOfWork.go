// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	uow "github.com/arcorium/nexa/shared/uow"

	mock "github.com/stretchr/testify/mock"
)

// UnitOfWorkMock is an autogenerated mock type for the IUnitOfWork type
type UnitOfWorkMock[T interface{}] struct {
	mock.Mock
}

type UnitOfWorkMock_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *UnitOfWorkMock[T]) EXPECT() *UnitOfWorkMock_Expecter[T] {
	return &UnitOfWorkMock_Expecter[T]{mock: &_m.Mock}
}

// DoTx provides a mock function with given fields: ctx, f
func (_m *UnitOfWorkMock[T]) DoTx(ctx context.Context, f uow.UOWBlock[T]) error {
	ret := _m.Called(ctx, f)

	if len(ret) == 0 {
		panic("no return value specified for DoTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uow.UOWBlock[T]) error); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnitOfWorkMock_DoTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoTx'
type UnitOfWorkMock_DoTx_Call[T interface{}] struct {
	*mock.Call
}

// DoTx is a helper method to define mock.On call
//   - ctx context.Context
//   - f uow.UOWBlock[T]
func (_e *UnitOfWorkMock_Expecter[T]) DoTx(ctx interface{}, f interface{}) *UnitOfWorkMock_DoTx_Call[T] {
	return &UnitOfWorkMock_DoTx_Call[T]{Call: _e.mock.On("DoTx", ctx, f)}
}

func (_c *UnitOfWorkMock_DoTx_Call[T]) Run(run func(ctx context.Context, f uow.UOWBlock[T])) *UnitOfWorkMock_DoTx_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uow.UOWBlock[T]))
	})
	return _c
}

func (_c *UnitOfWorkMock_DoTx_Call[T]) Return(_a0 error) *UnitOfWorkMock_DoTx_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWorkMock_DoTx_Call[T]) RunAndReturn(run func(context.Context, uow.UOWBlock[T]) error) *UnitOfWorkMock_DoTx_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Repositories provides a mock function with given fields:
func (_m *UnitOfWorkMock[T]) Repositories() T {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Repositories")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// UnitOfWorkMock_Repositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Repositories'
type UnitOfWorkMock_Repositories_Call[T interface{}] struct {
	*mock.Call
}

// Repositories is a helper method to define mock.On call
func (_e *UnitOfWorkMock_Expecter[T]) Repositories() *UnitOfWorkMock_Repositories_Call[T] {
	return &UnitOfWorkMock_Repositories_Call[T]{Call: _e.mock.On("Repositories")}
}

func (_c *UnitOfWorkMock_Repositories_Call[T]) Run(run func()) *UnitOfWorkMock_Repositories_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UnitOfWorkMock_Repositories_Call[T]) Return(_a0 T) *UnitOfWorkMock_Repositories_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWorkMock_Repositories_Call[T]) RunAndReturn(run func() T) *UnitOfWorkMock_Repositories_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewUnitOfWorkMock creates a new instance of UnitOfWorkMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnitOfWorkMock[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *UnitOfWorkMock[T] {
	mock := &UnitOfWorkMock[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
