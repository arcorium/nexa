syntax = "proto3";
package nexa.post.v1;
option go_package = "nexa/proto/gen/go/post/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "common/paged.proto";

service PostService {
  rpc Find(common.PagedElementInput) returns(FindPostResponse);
  rpc FindEdited(FindEditedPostRequest) returns(FindEditedPostResponse);
  rpc FindById(FindPostByIdRequest) returns(FindPostByIdResponse);
  rpc FindUsers(FindUserPostRequest) returns(FindUserPostResponse);
  rpc Create(CreatePostRequest) returns (CreatePostResponse);
  rpc UpdateVisibility(UpdatePostVisibilityRequest) returns (google.protobuf.Empty);
//  rpc Edit(EditPostRequest) returns (EditPostResponse);
  rpc Edit(EditPostRequest) returns (google.protobuf.Empty);
  rpc Delete(DeletePostRequest) returns (google.protobuf.Empty);

  rpc Bookmark(BookmarkPostRequest) returns (google.protobuf.Empty);
  rpc GetBookmarked(GetBookmarkedPostRequest) returns (GetBookmarkedPostResponse);

  rpc ClearUsers(ClearUserPostsRequest) returns (google.protobuf.Empty);
}

enum Visibility {
  PUBLIC = 0;
  FOLLOWER = 1;
  ONLY_ME = 2;
}

//message UserTag {
//  string user_id = 1;
//  string user_name = 2;
//}

message Post {
  string id = 1;
  optional Post parent_post = 2;
  string creator_id = 3;
  string content = 4;
  Visibility visibility = 5;

  optional google.protobuf.Timestamp last_edited = 6;
  google.protobuf.Timestamp created_at = 7;
  repeated string tagged_user_ids = 8;
  repeated string media_urls = 9;
}

message EditedPost {
  message Post {
    string content = 1;
    google.protobuf.Timestamp created_at = 2;
    repeated string tagged_user_ids = 8;
    repeated string media_urls = 9;
  }

  string post_id = 1;
  string creator_id = 2;
  repeated Post posts = 3;
}

message FindPostResponse {
  common.PagedElementOutput details = 1;
  repeated Post posts = 2;
}

message FindEditedPostRequest {
  string post_id = 1;
}

message FindEditedPostResponse {
  EditedPost post = 1;
}

message FindPostByIdRequest {
  string post_id = 1;
}

message FindPostByIdResponse {
  Post post = 1;
}

message FindUserPostRequest {
  optional string user_id = 1;
  common.PagedElementInput details = 2;
}

message FindUserPostResponse {
  common.PagedElementOutput details = 1;
  repeated Post posts = 2;
}

message CreatePostRequest {
  optional string shared_post_id = 1;
  optional string content = 2;
  Visibility visibility = 3;
  repeated string media_ids = 4;
  repeated string user_ids = 5; // Tags
}

message CreatePostResponse {
  string post_id = 1;
}

message UpdatePostVisibilityRequest {
  string post_id = 1;
  Visibility new_visibility = 2;
}

message EditPostRequest {
  string post_id = 1;
  string content = 2;
  bool clone_last_media= 3; // When this field is true, media_ids will be ignored
  repeated string media_ids = 4;
  bool clone_last_tagged_user= 5; // When this field is true, tagged_user_ids will be ignored
  repeated string tagged_user_ids = 6;
}

//message EditPostResponse {
//
//}

message DeletePostRequest {
  string post_id = 1;
}

message BookmarkPostRequest {
  string post_id = 1;
}

message GetBookmarkedPostRequest {
//  string user_id = 1; // Allow to get other bookmarked posts for authorized user
  common.PagedElementInput details = 2;
}

message GetBookmarkedPostResponse {
  repeated Post posts = 1;
  common.PagedElementOutput details = 2;
}

message ClearUserPostsRequest {
  string user_id = 1;
}