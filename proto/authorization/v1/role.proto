syntax = "proto3";

package nexa.authorization.v1;
option go_package = "nexa/proto/generated/golang/authorization/v1";

import "google/protobuf/empty.proto";
import "common/paged.proto";
import "authorization/v1/message.proto";

service RoleService {
  rpc Create(CreateRoleRequest) returns (RoleCreateResponse);
  rpc Update(UpdateRoleRequest) returns (google.protobuf.Empty);
  rpc Delete(DeleteRoleRequest) returns (google.protobuf.Empty);
  rpc GetUsers(GetUserRolesRequest) returns (GetUserRolesResponse);
  rpc Find(FindRoleRequest) returns (FindRoleResponse);
  rpc FindAll(common.PagedElementInput) returns (FindAllRolesResponse);

  rpc AddUser(AddUserRolesRequest) returns (google.protobuf.Empty);
  rpc RemoveUser(RemoveUserRolesRequest) returns (google.protobuf.Empty);

  rpc AppendPermissions(AppendRolePermissionsRequest) returns (google.protobuf.Empty);
  rpc RemovePermissions(RemoveRolePermissionsRequest) returns (google.protobuf.Empty);

  // Protected API
  rpc AppendSuperRolePermissions(AppendSuperRolePermissionsRequest) returns (google.protobuf.Empty);
//  rpc GetSuper(google.protobuf.Empty) returns (RolePermission); // Get super roles information
  rpc SetAsSuper(SetAsSuperRequest) returns (google.protobuf.Empty); // Set user as super role
}

message SetAsSuperRequest {
  string user_id = 1;
}

message GetUserRolesRequest {
  string user_id = 1;
  bool include_permission = 2;  // either need the permissions also transmitted or not
}

message GetUserRolesResponse {
  repeated RolePermission role_permissions = 1;
}

message AddUserRolesRequest {
  string user_id = 1;
  repeated string role_ids = 2;
}

message RemoveUserRolesRequest {
  string user_id = 1;
  repeated string role_ids = 2;
}

message CreateRoleRequest {
  string name = 1;
  optional string description = 2;
  repeated string permission_ids = 3;
}

message RoleCreateResponse {
  string id = 1;
}

message UpdateRoleRequest {
  string id = 1;
  optional string name = 2;
  optional string description = 3;
}

message DeleteRoleRequest {
  string id = 1;
}

message FindRoleRequest {
  repeated string role_ids = 1;
}

message FindRoleResponse {
  repeated Role roles = 1;
}

message FindAllRolesResponse {
  common.PagedElementOutput details = 1;
  repeated Role roles = 2;
}

message AppendRolePermissionsRequest {
  string role_id = 1;
  repeated string permission_ids = 2;
}

message RemoveRolePermissionsRequest {
  string role_id = 1;
  repeated string permission_ids = 2;
}

message AppendSuperRolePermissionsRequest{
  repeated string permission_ids = 2;
}
