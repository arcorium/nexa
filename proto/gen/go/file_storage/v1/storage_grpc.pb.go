// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: file_storage/v1/storage.proto

package storagev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileStorageService_Find_FullMethodName         = "/nexa.storage.v1.FileStorageService/Find"
	FileStorageService_FindMetadata_FullMethodName = "/nexa.storage.v1.FileStorageService/FindMetadata"
	FileStorageService_Store_FullMethodName        = "/nexa.storage.v1.FileStorageService/Store"
	FileStorageService_Update_FullMethodName       = "/nexa.storage.v1.FileStorageService/Update"
	FileStorageService_Delete_FullMethodName       = "/nexa.storage.v1.FileStorageService/Delete"
)

// FileStorageServiceClient is the client API for FileStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStorageServiceClient interface {
	Find(ctx context.Context, in *FindFileRequest, opts ...grpc.CallOption) (FileStorageService_FindClient, error)
	FindMetadata(ctx context.Context, in *FindFileMetadataRequest, opts ...grpc.CallOption) (*FindFileMetadataResponse, error)
	Store(ctx context.Context, opts ...grpc.CallOption) (FileStorageService_StoreClient, error)
	Update(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fileStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStorageServiceClient(cc grpc.ClientConnInterface) FileStorageServiceClient {
	return &fileStorageServiceClient{cc}
}

func (c *fileStorageServiceClient) Find(ctx context.Context, in *FindFileRequest, opts ...grpc.CallOption) (FileStorageService_FindClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileStorageService_ServiceDesc.Streams[0], FileStorageService_Find_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStorageServiceFindClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileStorageService_FindClient interface {
	Recv() (*FindFileResponse, error)
	grpc.ClientStream
}

type fileStorageServiceFindClient struct {
	grpc.ClientStream
}

func (x *fileStorageServiceFindClient) Recv() (*FindFileResponse, error) {
	m := new(FindFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileStorageServiceClient) FindMetadata(ctx context.Context, in *FindFileMetadataRequest, opts ...grpc.CallOption) (*FindFileMetadataResponse, error) {
	out := new(FindFileMetadataResponse)
	err := c.cc.Invoke(ctx, FileStorageService_FindMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileStorageServiceClient) Store(ctx context.Context, opts ...grpc.CallOption) (FileStorageService_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileStorageService_ServiceDesc.Streams[1], FileStorageService_Store_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStorageServiceStoreClient{stream}
	return x, nil
}

type FileStorageService_StoreClient interface {
	Send(*StoreFileRequest) error
	CloseAndRecv() (*StoreFileResponse, error)
	grpc.ClientStream
}

type fileStorageServiceStoreClient struct {
	grpc.ClientStream
}

func (x *fileStorageServiceStoreClient) Send(m *StoreFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileStorageServiceStoreClient) CloseAndRecv() (*StoreFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileStorageServiceClient) Update(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FileStorageService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileStorageServiceClient) Delete(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FileStorageService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileStorageServiceServer is the server API for FileStorageService service.
// All implementations must embed UnimplementedFileStorageServiceServer
// for forward compatibility
type FileStorageServiceServer interface {
	Find(*FindFileRequest, FileStorageService_FindServer) error
	FindMetadata(context.Context, *FindFileMetadataRequest) (*FindFileMetadataResponse, error)
	Store(FileStorageService_StoreServer) error
	Update(context.Context, *UpdateFileRequest) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteFileRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFileStorageServiceServer()
}

// UnimplementedFileStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileStorageServiceServer struct {
}

func (UnimplementedFileStorageServiceServer) Find(*FindFileRequest, FileStorageService_FindServer) error {
	return status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedFileStorageServiceServer) FindMetadata(context.Context, *FindFileMetadataRequest) (*FindFileMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMetadata not implemented")
}
func (UnimplementedFileStorageServiceServer) Store(FileStorageService_StoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedFileStorageServiceServer) Update(context.Context, *UpdateFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFileStorageServiceServer) Delete(context.Context, *DeleteFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFileStorageServiceServer) mustEmbedUnimplementedFileStorageServiceServer() {}

// UnsafeFileStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStorageServiceServer will
// result in compilation errors.
type UnsafeFileStorageServiceServer interface {
	mustEmbedUnimplementedFileStorageServiceServer()
}

func RegisterFileStorageServiceServer(s grpc.ServiceRegistrar, srv FileStorageServiceServer) {
	s.RegisterService(&FileStorageService_ServiceDesc, srv)
}

func _FileStorageService_Find_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileStorageServiceServer).Find(m, &fileStorageServiceFindServer{stream})
}

type FileStorageService_FindServer interface {
	Send(*FindFileResponse) error
	grpc.ServerStream
}

type fileStorageServiceFindServer struct {
	grpc.ServerStream
}

func (x *fileStorageServiceFindServer) Send(m *FindFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileStorageService_FindMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServiceServer).FindMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileStorageService_FindMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServiceServer).FindMetadata(ctx, req.(*FindFileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileStorageService_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileStorageServiceServer).Store(&fileStorageServiceStoreServer{stream})
}

type FileStorageService_StoreServer interface {
	SendAndClose(*StoreFileResponse) error
	Recv() (*StoreFileRequest, error)
	grpc.ServerStream
}

type fileStorageServiceStoreServer struct {
	grpc.ServerStream
}

func (x *fileStorageServiceStoreServer) SendAndClose(m *StoreFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileStorageServiceStoreServer) Recv() (*StoreFileRequest, error) {
	m := new(StoreFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileStorageService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileStorageService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServiceServer).Update(ctx, req.(*UpdateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileStorageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileStorageService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServiceServer).Delete(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileStorageService_ServiceDesc is the grpc.ServiceDesc for FileStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nexa.storage.v1.FileStorageService",
	HandlerType: (*FileStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMetadata",
			Handler:    _FileStorageService_FindMetadata_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FileStorageService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FileStorageService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Find",
			Handler:       _FileStorageService_Find_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Store",
			Handler:       _FileStorageService_Store_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file_storage/v1/storage.proto",
}
