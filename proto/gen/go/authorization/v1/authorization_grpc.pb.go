// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: authorization/v1/authorization.proto

package authorizationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	common "nexa/proto/gen/go/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Authorization_CreateAction_FullMethodName        = "/nexa.proto.generated.authorization.v1.Authorization/CreateAction"
	Authorization_UpdateAction_FullMethodName        = "/nexa.proto.generated.authorization.v1.Authorization/UpdateAction"
	Authorization_DeleteAction_FullMethodName        = "/nexa.proto.generated.authorization.v1.Authorization/DeleteAction"
	Authorization_FindAction_FullMethodName          = "/nexa.proto.generated.authorization.v1.Authorization/FindAction"
	Authorization_FindAllAction_FullMethodName       = "/nexa.proto.generated.authorization.v1.Authorization/FindAllAction"
	Authorization_CreateRole_FullMethodName          = "/nexa.proto.generated.authorization.v1.Authorization/CreateRole"
	Authorization_UpdateRole_FullMethodName          = "/nexa.proto.generated.authorization.v1.Authorization/UpdateRole"
	Authorization_DeleteRole_FullMethodName          = "/nexa.proto.generated.authorization.v1.Authorization/DeleteRole"
	Authorization_FindRole_FullMethodName            = "/nexa.proto.generated.authorization.v1.Authorization/FindRole"
	Authorization_FindByUserIdRole_FullMethodName    = "/nexa.proto.generated.authorization.v1.Authorization/FindByUserIdRole"
	Authorization_FindAllRole_FullMethodName         = "/nexa.proto.generated.authorization.v1.Authorization/FindAllRole"
	Authorization_CreateResource_FullMethodName      = "/nexa.proto.generated.authorization.v1.Authorization/CreateResource"
	Authorization_UpdateResource_FullMethodName      = "/nexa.proto.generated.authorization.v1.Authorization/UpdateResource"
	Authorization_DeleteResource_FullMethodName      = "/nexa.proto.generated.authorization.v1.Authorization/DeleteResource"
	Authorization_FindResource_FullMethodName        = "/nexa.proto.generated.authorization.v1.Authorization/FindResource"
	Authorization_FindAllResource_FullMethodName     = "/nexa.proto.generated.authorization.v1.Authorization/FindAllResource"
	Authorization_CreatePermission_FullMethodName    = "/nexa.proto.generated.authorization.v1.Authorization/CreatePermission"
	Authorization_FindPermission_FullMethodName      = "/nexa.proto.generated.authorization.v1.Authorization/FindPermission"
	Authorization_FindAllPermission_FullMethodName   = "/nexa.proto.generated.authorization.v1.Authorization/FindAllPermission"
	Authorization_DeletePermission_FullMethodName    = "/nexa.proto.generated.authorization.v1.Authorization/DeletePermission"
	Authorization_CheckUserPermission_FullMethodName = "/nexa.proto.generated.authorization.v1.Authorization/CheckUserPermission"
)

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationClient interface {
	// Action
	CreateAction(ctx context.Context, in *ActionCreateRequest, opts ...grpc.CallOption) (*ActionCreateResponse, error)
	UpdateAction(ctx context.Context, in *ActionUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAction(ctx context.Context, in *ActionDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindAction(ctx context.Context, in *ActionFindRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	FindAllAction(ctx context.Context, in *common.PagedElementInput, opts ...grpc.CallOption) (*ActionFindAllResponse, error)
	// Role
	CreateRole(ctx context.Context, in *RoleCreateRequest, opts ...grpc.CallOption) (*RoleCreateResponse, error)
	UpdateRole(ctx context.Context, in *RoleUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRole(ctx context.Context, in *RoleDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindRole(ctx context.Context, in *RoleFindRequest, opts ...grpc.CallOption) (*RoleFindResponse, error)
	FindByUserIdRole(ctx context.Context, in *RoleFindByUserIdRequest, opts ...grpc.CallOption) (*RoleFindByUserIdResponse, error)
	FindAllRole(ctx context.Context, in *common.PagedElementInput, opts ...grpc.CallOption) (*RoleFindAllResponse, error)
	// Resource
	CreateResource(ctx context.Context, in *ResourceCreateRequest, opts ...grpc.CallOption) (*ResourceCreateResponse, error)
	UpdateResource(ctx context.Context, in *ResourceUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteResource(ctx context.Context, in *ResourceDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindResource(ctx context.Context, in *ResourceFindRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	FindAllResource(ctx context.Context, in *common.PagedElementInput, opts ...grpc.CallOption) (*ResourceFindAllResponse, error)
	// Permission
	CreatePermission(ctx context.Context, in *PermissionCreateRequest, opts ...grpc.CallOption) (*PermissionCreateResponse, error)
	FindPermission(ctx context.Context, in *PermissionFindRequest, opts ...grpc.CallOption) (*PermissionResponse, error)
	FindAllPermission(ctx context.Context, in *common.PagedElementInput, opts ...grpc.CallOption) (*PermissionFindAllResponse, error)
	DeletePermission(ctx context.Context, in *PermissionDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckUserPermission(ctx context.Context, in *CheckUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationClient(cc grpc.ClientConnInterface) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) CreateAction(ctx context.Context, in *ActionCreateRequest, opts ...grpc.CallOption) (*ActionCreateResponse, error) {
	out := new(ActionCreateResponse)
	err := c.cc.Invoke(ctx, Authorization_CreateAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UpdateAction(ctx context.Context, in *ActionUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_UpdateAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteAction(ctx context.Context, in *ActionDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_DeleteAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) FindAction(ctx context.Context, in *ActionFindRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, Authorization_FindAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) FindAllAction(ctx context.Context, in *common.PagedElementInput, opts ...grpc.CallOption) (*ActionFindAllResponse, error) {
	out := new(ActionFindAllResponse)
	err := c.cc.Invoke(ctx, Authorization_FindAllAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CreateRole(ctx context.Context, in *RoleCreateRequest, opts ...grpc.CallOption) (*RoleCreateResponse, error) {
	out := new(RoleCreateResponse)
	err := c.cc.Invoke(ctx, Authorization_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UpdateRole(ctx context.Context, in *RoleUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteRole(ctx context.Context, in *RoleDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) FindRole(ctx context.Context, in *RoleFindRequest, opts ...grpc.CallOption) (*RoleFindResponse, error) {
	out := new(RoleFindResponse)
	err := c.cc.Invoke(ctx, Authorization_FindRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) FindByUserIdRole(ctx context.Context, in *RoleFindByUserIdRequest, opts ...grpc.CallOption) (*RoleFindByUserIdResponse, error) {
	out := new(RoleFindByUserIdResponse)
	err := c.cc.Invoke(ctx, Authorization_FindByUserIdRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) FindAllRole(ctx context.Context, in *common.PagedElementInput, opts ...grpc.CallOption) (*RoleFindAllResponse, error) {
	out := new(RoleFindAllResponse)
	err := c.cc.Invoke(ctx, Authorization_FindAllRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CreateResource(ctx context.Context, in *ResourceCreateRequest, opts ...grpc.CallOption) (*ResourceCreateResponse, error) {
	out := new(ResourceCreateResponse)
	err := c.cc.Invoke(ctx, Authorization_CreateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UpdateResource(ctx context.Context, in *ResourceUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_UpdateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteResource(ctx context.Context, in *ResourceDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_DeleteResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) FindResource(ctx context.Context, in *ResourceFindRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := c.cc.Invoke(ctx, Authorization_FindResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) FindAllResource(ctx context.Context, in *common.PagedElementInput, opts ...grpc.CallOption) (*ResourceFindAllResponse, error) {
	out := new(ResourceFindAllResponse)
	err := c.cc.Invoke(ctx, Authorization_FindAllResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CreatePermission(ctx context.Context, in *PermissionCreateRequest, opts ...grpc.CallOption) (*PermissionCreateResponse, error) {
	out := new(PermissionCreateResponse)
	err := c.cc.Invoke(ctx, Authorization_CreatePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) FindPermission(ctx context.Context, in *PermissionFindRequest, opts ...grpc.CallOption) (*PermissionResponse, error) {
	out := new(PermissionResponse)
	err := c.cc.Invoke(ctx, Authorization_FindPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) FindAllPermission(ctx context.Context, in *common.PagedElementInput, opts ...grpc.CallOption) (*PermissionFindAllResponse, error) {
	out := new(PermissionFindAllResponse)
	err := c.cc.Invoke(ctx, Authorization_FindAllPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeletePermission(ctx context.Context, in *PermissionDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_DeletePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CheckUserPermission(ctx context.Context, in *CheckUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_CheckUserPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
// All implementations must embed UnimplementedAuthorizationServer
// for forward compatibility
type AuthorizationServer interface {
	// Action
	CreateAction(context.Context, *ActionCreateRequest) (*ActionCreateResponse, error)
	UpdateAction(context.Context, *ActionUpdateRequest) (*emptypb.Empty, error)
	DeleteAction(context.Context, *ActionDeleteRequest) (*emptypb.Empty, error)
	FindAction(context.Context, *ActionFindRequest) (*ActionResponse, error)
	FindAllAction(context.Context, *common.PagedElementInput) (*ActionFindAllResponse, error)
	// Role
	CreateRole(context.Context, *RoleCreateRequest) (*RoleCreateResponse, error)
	UpdateRole(context.Context, *RoleUpdateRequest) (*emptypb.Empty, error)
	DeleteRole(context.Context, *RoleDeleteRequest) (*emptypb.Empty, error)
	FindRole(context.Context, *RoleFindRequest) (*RoleFindResponse, error)
	FindByUserIdRole(context.Context, *RoleFindByUserIdRequest) (*RoleFindByUserIdResponse, error)
	FindAllRole(context.Context, *common.PagedElementInput) (*RoleFindAllResponse, error)
	// Resource
	CreateResource(context.Context, *ResourceCreateRequest) (*ResourceCreateResponse, error)
	UpdateResource(context.Context, *ResourceUpdateRequest) (*emptypb.Empty, error)
	DeleteResource(context.Context, *ResourceDeleteRequest) (*emptypb.Empty, error)
	FindResource(context.Context, *ResourceFindRequest) (*ResourceResponse, error)
	FindAllResource(context.Context, *common.PagedElementInput) (*ResourceFindAllResponse, error)
	// Permission
	CreatePermission(context.Context, *PermissionCreateRequest) (*PermissionCreateResponse, error)
	FindPermission(context.Context, *PermissionFindRequest) (*PermissionResponse, error)
	FindAllPermission(context.Context, *common.PagedElementInput) (*PermissionFindAllResponse, error)
	DeletePermission(context.Context, *PermissionDeleteRequest) (*emptypb.Empty, error)
	CheckUserPermission(context.Context, *CheckUserRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAuthorizationServer()
}

// UnimplementedAuthorizationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServer struct {
}

func (UnimplementedAuthorizationServer) CreateAction(context.Context, *ActionCreateRequest) (*ActionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAction not implemented")
}
func (UnimplementedAuthorizationServer) UpdateAction(context.Context, *ActionUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAction not implemented")
}
func (UnimplementedAuthorizationServer) DeleteAction(context.Context, *ActionDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAction not implemented")
}
func (UnimplementedAuthorizationServer) FindAction(context.Context, *ActionFindRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAction not implemented")
}
func (UnimplementedAuthorizationServer) FindAllAction(context.Context, *common.PagedElementInput) (*ActionFindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllAction not implemented")
}
func (UnimplementedAuthorizationServer) CreateRole(context.Context, *RoleCreateRequest) (*RoleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAuthorizationServer) UpdateRole(context.Context, *RoleUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAuthorizationServer) DeleteRole(context.Context, *RoleDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAuthorizationServer) FindRole(context.Context, *RoleFindRequest) (*RoleFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRole not implemented")
}
func (UnimplementedAuthorizationServer) FindByUserIdRole(context.Context, *RoleFindByUserIdRequest) (*RoleFindByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByUserIdRole not implemented")
}
func (UnimplementedAuthorizationServer) FindAllRole(context.Context, *common.PagedElementInput) (*RoleFindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllRole not implemented")
}
func (UnimplementedAuthorizationServer) CreateResource(context.Context, *ResourceCreateRequest) (*ResourceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedAuthorizationServer) UpdateResource(context.Context, *ResourceUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedAuthorizationServer) DeleteResource(context.Context, *ResourceDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedAuthorizationServer) FindResource(context.Context, *ResourceFindRequest) (*ResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindResource not implemented")
}
func (UnimplementedAuthorizationServer) FindAllResource(context.Context, *common.PagedElementInput) (*ResourceFindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllResource not implemented")
}
func (UnimplementedAuthorizationServer) CreatePermission(context.Context, *PermissionCreateRequest) (*PermissionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedAuthorizationServer) FindPermission(context.Context, *PermissionFindRequest) (*PermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPermission not implemented")
}
func (UnimplementedAuthorizationServer) FindAllPermission(context.Context, *common.PagedElementInput) (*PermissionFindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllPermission not implemented")
}
func (UnimplementedAuthorizationServer) DeletePermission(context.Context, *PermissionDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedAuthorizationServer) CheckUserPermission(context.Context, *CheckUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserPermission not implemented")
}
func (UnimplementedAuthorizationServer) mustEmbedUnimplementedAuthorizationServer() {}

// UnsafeAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServer will
// result in compilation errors.
type UnsafeAuthorizationServer interface {
	mustEmbedUnimplementedAuthorizationServer()
}

func RegisterAuthorizationServer(s grpc.ServiceRegistrar, srv AuthorizationServer) {
	s.RegisterService(&Authorization_ServiceDesc, srv)
}

func _Authorization_CreateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CreateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_CreateAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CreateAction(ctx, req.(*ActionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UpdateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UpdateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_UpdateAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UpdateAction(ctx, req.(*ActionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_DeleteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteAction(ctx, req.(*ActionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_FindAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).FindAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_FindAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).FindAction(ctx, req.(*ActionFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_FindAllAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PagedElementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).FindAllAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_FindAllAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).FindAllAction(ctx, req.(*common.PagedElementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CreateRole(ctx, req.(*RoleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UpdateRole(ctx, req.(*RoleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteRole(ctx, req.(*RoleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_FindRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).FindRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_FindRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).FindRole(ctx, req.(*RoleFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_FindByUserIdRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleFindByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).FindByUserIdRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_FindByUserIdRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).FindByUserIdRole(ctx, req.(*RoleFindByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_FindAllRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PagedElementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).FindAllRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_FindAllRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).FindAllRole(ctx, req.(*common.PagedElementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_CreateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CreateResource(ctx, req.(*ResourceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UpdateResource(ctx, req.(*ResourceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteResource(ctx, req.(*ResourceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_FindResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).FindResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_FindResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).FindResource(ctx, req.(*ResourceFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_FindAllResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PagedElementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).FindAllResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_FindAllResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).FindAllResource(ctx, req.(*common.PagedElementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CreatePermission(ctx, req.(*PermissionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_FindPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).FindPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_FindPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).FindPermission(ctx, req.(*PermissionFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_FindAllPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PagedElementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).FindAllPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_FindAllPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).FindAllPermission(ctx, req.(*common.PagedElementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_DeletePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeletePermission(ctx, req.(*PermissionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CheckUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CheckUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_CheckUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CheckUserPermission(ctx, req.(*CheckUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authorization_ServiceDesc is the grpc.ServiceDesc for Authorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nexa.proto.generated.authorization.v1.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAction",
			Handler:    _Authorization_CreateAction_Handler,
		},
		{
			MethodName: "UpdateAction",
			Handler:    _Authorization_UpdateAction_Handler,
		},
		{
			MethodName: "DeleteAction",
			Handler:    _Authorization_DeleteAction_Handler,
		},
		{
			MethodName: "FindAction",
			Handler:    _Authorization_FindAction_Handler,
		},
		{
			MethodName: "FindAllAction",
			Handler:    _Authorization_FindAllAction_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Authorization_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Authorization_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Authorization_DeleteRole_Handler,
		},
		{
			MethodName: "FindRole",
			Handler:    _Authorization_FindRole_Handler,
		},
		{
			MethodName: "FindByUserIdRole",
			Handler:    _Authorization_FindByUserIdRole_Handler,
		},
		{
			MethodName: "FindAllRole",
			Handler:    _Authorization_FindAllRole_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _Authorization_CreateResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _Authorization_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _Authorization_DeleteResource_Handler,
		},
		{
			MethodName: "FindResource",
			Handler:    _Authorization_FindResource_Handler,
		},
		{
			MethodName: "FindAllResource",
			Handler:    _Authorization_FindAllResource_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _Authorization_CreatePermission_Handler,
		},
		{
			MethodName: "FindPermission",
			Handler:    _Authorization_FindPermission_Handler,
		},
		{
			MethodName: "FindAllPermission",
			Handler:    _Authorization_FindAllPermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _Authorization_DeletePermission_Handler,
		},
		{
			MethodName: "CheckUserPermission",
			Handler:    _Authorization_CheckUserPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authorization/v1/authorization.proto",
}
