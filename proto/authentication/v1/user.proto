syntax = "proto3";
package nexa.authentication.v1;
option go_package = "nexa/proto/generated/golang/authentication/v1";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "token/v1/token.proto";
import "common/paged.proto";

service UserService {
  rpc Create(CreateUserRequest) returns (CreateUserResponse);
  rpc Update(UpdateUserRequest) returns (google.protobuf.Empty);
  rpc UpdatePassword(UpdateUserPasswordRequest) returns (google.protobuf.Empty);
  rpc UpdateAvatar(stream UpdateProfileAvatarRequest) returns (google.protobuf.Empty);

  rpc Find(common.PagedElementInput) returns(FindUsersResponse);
  rpc FindByIds(FindUsersByIdsRequest) returns (FindUserByIdsResponse);
  rpc Banned(BannedUserRequest) returns (google.protobuf.Empty);
  rpc Delete(DeleteUserRequest) returns (google.protobuf.Empty);
  rpc ResetPassword(ResetUserPasswordRequest) returns (google.protobuf.Empty);

  // Handle requesting token for reset password
  rpc ForgotPassword(ForgotUserPasswordRequest) returns (ForgotUserPasswordResponse);
  // Handle validating token for reset password
  rpc ResetPasswordByToken(ResetPasswordByTokenRequest) returns (google.protobuf.Empty);
  // Handle request and validation of email verification
  rpc VerifyEmail(VerifyUserEmailRequest) returns (VerifyUserEmailResponse);
}

message User {
  string id = 1;
  string username = 2;
  string email = 3;
  bool is_verified = 4;
  string first_name = 5;
  string last_name = 6;
  string bio = 7;
  string image_path = 8;
}

message VerifyUserEmailRequest {
  optional string token = 2;
}

message VerifyUserEmailResponse {
  optional token.v1.Token token = 1;
}

message ValidateUserRequest {
  string email = 1;
  string password = 2;
}

message ValidateUserResponse {
  User user = 1;
}

message CreateUserResponse {
  string id = 1;
}

message CreateUserRequest {
  string username = 1;
  string email = 2;
  string password = 3;
  string first_name = 4;
  optional string last_name = 5;
  optional string bio = 6;
}

message UpdateUserRequest {
  string id = 1;
  optional string username = 2;
  optional string email = 3;
  optional string first_name = 4;
  optional string last_name = 5;
  optional string bio = 6;
}

message UpdateUserPasswordRequest {
  string id = 1;
  string last_password = 2;
  string new_password = 3;
}

message FindUsersResponse {
  common.PagedElementOutput details = 1;
  repeated User users = 2;
}

message FindUsersByIdsRequest {
  repeated string ids = 1;
}

message DeleteUserRequest {
  optional string user_id = 1;
}

message BannedUserRequest {
  string id = 1;
  google.protobuf.Duration duration = 2;
}

message ForgotUserPasswordRequest {
  string email = 1;
}

message ForgotUserPasswordResponse {
  token.v1.Token token = 2;
}

message ResetPasswordByTokenRequest {
  // It could be used for reset token from forgot password or reset some user password for authorized user
  string token = 1;
  string new_password = 2;
  bool logout_all = 3;
}

message ResetUserPasswordRequest {
  // It could be used for reset token from forgot password or reset some user password for authorized user
  string user_id = 1;
  string new_password = 2;
  bool logout_all = 3;
}

message FindUserByIdsResponse {
  repeated User users = 1;
}

message UpdateProfileAvatarRequest {
  string id = 1;
  string filename = 2;
  bytes chunk = 3;
}