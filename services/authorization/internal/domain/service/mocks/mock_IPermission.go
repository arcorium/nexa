// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/authorization/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	shareddto "github.com/arcorium/nexa/shared/dto"

	status "github.com/arcorium/nexa/shared/status"

	types "github.com/arcorium/nexa/shared/types"
)

// PermissionMock is an autogenerated mock type for the IPermission type
type PermissionMock struct {
	mock.Mock
}

type PermissionMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PermissionMock) EXPECT() *PermissionMock_Expecter {
	return &PermissionMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, createDTO
func (_m *PermissionMock) Create(ctx context.Context, createDTO *dto.PermissionCreateDTO) (types.Id, status.Object) {
	ret := _m.Called(ctx, createDTO)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 types.Id
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.PermissionCreateDTO) (types.Id, status.Object)); ok {
		return rf(ctx, createDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.PermissionCreateDTO) types.Id); ok {
		r0 = rf(ctx, createDTO)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Id)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.PermissionCreateDTO) status.Object); ok {
		r1 = rf(ctx, createDTO)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// PermissionMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PermissionMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - createDTO *dto.PermissionCreateDTO
func (_e *PermissionMock_Expecter) Create(ctx interface{}, createDTO interface{}) *PermissionMock_Create_Call {
	return &PermissionMock_Create_Call{Call: _e.mock.On("Create", ctx, createDTO)}
}

func (_c *PermissionMock_Create_Call) Run(run func(ctx context.Context, createDTO *dto.PermissionCreateDTO)) *PermissionMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.PermissionCreateDTO))
	})
	return _c
}

func (_c *PermissionMock_Create_Call) Return(_a0 types.Id, _a1 status.Object) *PermissionMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PermissionMock_Create_Call) RunAndReturn(run func(context.Context, *dto.PermissionCreateDTO) (types.Id, status.Object)) *PermissionMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, permId
func (_m *PermissionMock) Delete(ctx context.Context, permId types.Id) status.Object {
	ret := _m.Called(ctx, permId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) status.Object); ok {
		r0 = rf(ctx, permId)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// PermissionMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PermissionMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - permId types.Id
func (_e *PermissionMock_Expecter) Delete(ctx interface{}, permId interface{}) *PermissionMock_Delete_Call {
	return &PermissionMock_Delete_Call{Call: _e.mock.On("Delete", ctx, permId)}
}

func (_c *PermissionMock_Delete_Call) Run(run func(ctx context.Context, permId types.Id)) *PermissionMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *PermissionMock_Delete_Call) Return(_a0 status.Object) *PermissionMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PermissionMock_Delete_Call) RunAndReturn(run func(context.Context, types.Id) status.Object) *PermissionMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, permIds
func (_m *PermissionMock) Find(ctx context.Context, permIds ...types.Id) ([]dto.PermissionResponseDTO, status.Object) {
	_va := make([]interface{}, len(permIds))
	for _i := range permIds {
		_va[_i] = permIds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []dto.PermissionResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) ([]dto.PermissionResponseDTO, status.Object)); ok {
		return rf(ctx, permIds...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) []dto.PermissionResponseDTO); ok {
		r0 = rf(ctx, permIds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.PermissionResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...types.Id) status.Object); ok {
		r1 = rf(ctx, permIds...)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// PermissionMock_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type PermissionMock_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - permIds ...types.Id
func (_e *PermissionMock_Expecter) Find(ctx interface{}, permIds ...interface{}) *PermissionMock_Find_Call {
	return &PermissionMock_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{ctx}, permIds...)...)}
}

func (_c *PermissionMock_Find_Call) Run(run func(ctx context.Context, permIds ...types.Id)) *PermissionMock_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Id, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Id)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *PermissionMock_Find_Call) Return(_a0 []dto.PermissionResponseDTO, _a1 status.Object) *PermissionMock_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PermissionMock_Find_Call) RunAndReturn(run func(context.Context, ...types.Id) ([]dto.PermissionResponseDTO, status.Object)) *PermissionMock_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRoles provides a mock function with given fields: ctx, roleId
func (_m *PermissionMock) FindByRoles(ctx context.Context, roleId ...types.Id) ([]dto.PermissionResponseDTO, status.Object) {
	_va := make([]interface{}, len(roleId))
	for _i := range roleId {
		_va[_i] = roleId[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindByRoles")
	}

	var r0 []dto.PermissionResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) ([]dto.PermissionResponseDTO, status.Object)); ok {
		return rf(ctx, roleId...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) []dto.PermissionResponseDTO); ok {
		r0 = rf(ctx, roleId...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.PermissionResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...types.Id) status.Object); ok {
		r1 = rf(ctx, roleId...)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// PermissionMock_FindByRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRoles'
type PermissionMock_FindByRoles_Call struct {
	*mock.Call
}

// FindByRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - roleId ...types.Id
func (_e *PermissionMock_Expecter) FindByRoles(ctx interface{}, roleId ...interface{}) *PermissionMock_FindByRoles_Call {
	return &PermissionMock_FindByRoles_Call{Call: _e.mock.On("FindByRoles",
		append([]interface{}{ctx}, roleId...)...)}
}

func (_c *PermissionMock_FindByRoles_Call) Run(run func(ctx context.Context, roleId ...types.Id)) *PermissionMock_FindByRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Id, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Id)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *PermissionMock_FindByRoles_Call) Return(_a0 []dto.PermissionResponseDTO, _a1 status.Object) *PermissionMock_FindByRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PermissionMock_FindByRoles_Call) RunAndReturn(run func(context.Context, ...types.Id) ([]dto.PermissionResponseDTO, status.Object)) *PermissionMock_FindByRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, input
func (_m *PermissionMock) GetAll(ctx context.Context, input *shareddto.PagedElementDTO) (shareddto.PagedElementResult[dto.PermissionResponseDTO], status.Object) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 shareddto.PagedElementResult[dto.PermissionResponseDTO]
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *shareddto.PagedElementDTO) (shareddto.PagedElementResult[dto.PermissionResponseDTO], status.Object)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shareddto.PagedElementDTO) shareddto.PagedElementResult[dto.PermissionResponseDTO]); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(shareddto.PagedElementResult[dto.PermissionResponseDTO])
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shareddto.PagedElementDTO) status.Object); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// PermissionMock_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type PermissionMock_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - input *shareddto.PagedElementDTO
func (_e *PermissionMock_Expecter) GetAll(ctx interface{}, input interface{}) *PermissionMock_GetAll_Call {
	return &PermissionMock_GetAll_Call{Call: _e.mock.On("GetAll", ctx, input)}
}

func (_c *PermissionMock_GetAll_Call) Run(run func(ctx context.Context, input *shareddto.PagedElementDTO)) *PermissionMock_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*shareddto.PagedElementDTO))
	})
	return _c
}

func (_c *PermissionMock_GetAll_Call) Return(_a0 shareddto.PagedElementResult[dto.PermissionResponseDTO], _a1 status.Object) *PermissionMock_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PermissionMock_GetAll_Call) RunAndReturn(run func(context.Context, *shareddto.PagedElementDTO) (shareddto.PagedElementResult[dto.PermissionResponseDTO], status.Object)) *PermissionMock_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewPermissionMock creates a new instance of PermissionMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPermissionMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PermissionMock {
	mock := &PermissionMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
