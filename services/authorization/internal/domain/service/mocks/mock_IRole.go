// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/authorization/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	shareddto "github.com/arcorium/nexa/shared/dto"

	status "github.com/arcorium/nexa/shared/status"

	types "github.com/arcorium/nexa/shared/types"
)

// RoleMock is an autogenerated mock type for the IRole type
type RoleMock struct {
	mock.Mock
}

type RoleMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RoleMock) EXPECT() *RoleMock_Expecter {
	return &RoleMock_Expecter{mock: &_m.Mock}
}

// AddPermissions provides a mock function with given fields: ctx, modifyDTO
func (_m *RoleMock) AddPermissions(ctx context.Context, modifyDTO *dto.ModifyRolesPermissionsDTO) status.Object {
	ret := _m.Called(ctx, modifyDTO)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissions")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ModifyRolesPermissionsDTO) status.Object); ok {
		r0 = rf(ctx, modifyDTO)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// RoleMock_AddPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissions'
type RoleMock_AddPermissions_Call struct {
	*mock.Call
}

// AddPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - modifyDTO *dto.ModifyRolesPermissionsDTO
func (_e *RoleMock_Expecter) AddPermissions(ctx interface{}, modifyDTO interface{}) *RoleMock_AddPermissions_Call {
	return &RoleMock_AddPermissions_Call{Call: _e.mock.On("AddPermissions", ctx, modifyDTO)}
}

func (_c *RoleMock_AddPermissions_Call) Run(run func(ctx context.Context, modifyDTO *dto.ModifyRolesPermissionsDTO)) *RoleMock_AddPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.ModifyRolesPermissionsDTO))
	})
	return _c
}

func (_c *RoleMock_AddPermissions_Call) Return(_a0 status.Object) *RoleMock_AddPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleMock_AddPermissions_Call) RunAndReturn(run func(context.Context, *dto.ModifyRolesPermissionsDTO) status.Object) *RoleMock_AddPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// AddUsers provides a mock function with given fields: ctx, usersDTO
func (_m *RoleMock) AddUsers(ctx context.Context, usersDTO *dto.ModifyUserRolesDTO) status.Object {
	ret := _m.Called(ctx, usersDTO)

	if len(ret) == 0 {
		panic("no return value specified for AddUsers")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ModifyUserRolesDTO) status.Object); ok {
		r0 = rf(ctx, usersDTO)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// RoleMock_AddUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUsers'
type RoleMock_AddUsers_Call struct {
	*mock.Call
}

// AddUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - usersDTO *dto.ModifyUserRolesDTO
func (_e *RoleMock_Expecter) AddUsers(ctx interface{}, usersDTO interface{}) *RoleMock_AddUsers_Call {
	return &RoleMock_AddUsers_Call{Call: _e.mock.On("AddUsers", ctx, usersDTO)}
}

func (_c *RoleMock_AddUsers_Call) Run(run func(ctx context.Context, usersDTO *dto.ModifyUserRolesDTO)) *RoleMock_AddUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.ModifyUserRolesDTO))
	})
	return _c
}

func (_c *RoleMock_AddUsers_Call) Return(_a0 status.Object) *RoleMock_AddUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleMock_AddUsers_Call) RunAndReturn(run func(context.Context, *dto.ModifyUserRolesDTO) status.Object) *RoleMock_AddUsers_Call {
	_c.Call.Return(run)
	return _c
}

// AppendDefaultRolesPermission provides a mock function with given fields: ctx, permIds
func (_m *RoleMock) AppendDefaultRolesPermission(ctx context.Context, permIds ...types.Id) status.Object {
	_va := make([]interface{}, len(permIds))
	for _i := range permIds {
		_va[_i] = permIds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AppendDefaultRolesPermission")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) status.Object); ok {
		r0 = rf(ctx, permIds...)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// RoleMock_AppendDefaultRolesPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendDefaultRolesPermission'
type RoleMock_AppendDefaultRolesPermission_Call struct {
	*mock.Call
}

// AppendDefaultRolesPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - permIds ...types.Id
func (_e *RoleMock_Expecter) AppendDefaultRolesPermission(ctx interface{}, permIds ...interface{}) *RoleMock_AppendDefaultRolesPermission_Call {
	return &RoleMock_AppendDefaultRolesPermission_Call{Call: _e.mock.On("AppendDefaultRolesPermission",
		append([]interface{}{ctx}, permIds...)...)}
}

func (_c *RoleMock_AppendDefaultRolesPermission_Call) Run(run func(ctx context.Context, permIds ...types.Id)) *RoleMock_AppendDefaultRolesPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Id, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Id)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *RoleMock_AppendDefaultRolesPermission_Call) Return(_a0 status.Object) *RoleMock_AppendDefaultRolesPermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleMock_AppendDefaultRolesPermission_Call) RunAndReturn(run func(context.Context, ...types.Id) status.Object) *RoleMock_AppendDefaultRolesPermission_Call {
	_c.Call.Return(run)
	return _c
}

// AppendSuperRolesPermission provides a mock function with given fields: ctx, permIds
func (_m *RoleMock) AppendSuperRolesPermission(ctx context.Context, permIds ...types.Id) status.Object {
	_va := make([]interface{}, len(permIds))
	for _i := range permIds {
		_va[_i] = permIds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AppendSuperRolesPermission")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) status.Object); ok {
		r0 = rf(ctx, permIds...)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// RoleMock_AppendSuperRolesPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendSuperRolesPermission'
type RoleMock_AppendSuperRolesPermission_Call struct {
	*mock.Call
}

// AppendSuperRolesPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - permIds ...types.Id
func (_e *RoleMock_Expecter) AppendSuperRolesPermission(ctx interface{}, permIds ...interface{}) *RoleMock_AppendSuperRolesPermission_Call {
	return &RoleMock_AppendSuperRolesPermission_Call{Call: _e.mock.On("AppendSuperRolesPermission",
		append([]interface{}{ctx}, permIds...)...)}
}

func (_c *RoleMock_AppendSuperRolesPermission_Call) Run(run func(ctx context.Context, permIds ...types.Id)) *RoleMock_AppendSuperRolesPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Id, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Id)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *RoleMock_AppendSuperRolesPermission_Call) Return(_a0 status.Object) *RoleMock_AppendSuperRolesPermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleMock_AppendSuperRolesPermission_Call) RunAndReturn(run func(context.Context, ...types.Id) status.Object) *RoleMock_AppendSuperRolesPermission_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, createDTO
func (_m *RoleMock) Create(ctx context.Context, createDTO *dto.RoleCreateDTO) (types.Id, status.Object) {
	ret := _m.Called(ctx, createDTO)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 types.Id
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RoleCreateDTO) (types.Id, status.Object)); ok {
		return rf(ctx, createDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RoleCreateDTO) types.Id); ok {
		r0 = rf(ctx, createDTO)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Id)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.RoleCreateDTO) status.Object); ok {
		r1 = rf(ctx, createDTO)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// RoleMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RoleMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - createDTO *dto.RoleCreateDTO
func (_e *RoleMock_Expecter) Create(ctx interface{}, createDTO interface{}) *RoleMock_Create_Call {
	return &RoleMock_Create_Call{Call: _e.mock.On("Create", ctx, createDTO)}
}

func (_c *RoleMock_Create_Call) Run(run func(ctx context.Context, createDTO *dto.RoleCreateDTO)) *RoleMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.RoleCreateDTO))
	})
	return _c
}

func (_c *RoleMock_Create_Call) Return(_a0 types.Id, _a1 status.Object) *RoleMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleMock_Create_Call) RunAndReturn(run func(context.Context, *dto.RoleCreateDTO) (types.Id, status.Object)) *RoleMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, roleId
func (_m *RoleMock) Delete(ctx context.Context, roleId types.Id) status.Object {
	ret := _m.Called(ctx, roleId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) status.Object); ok {
		r0 = rf(ctx, roleId)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// RoleMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RoleMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - roleId types.Id
func (_e *RoleMock_Expecter) Delete(ctx interface{}, roleId interface{}) *RoleMock_Delete_Call {
	return &RoleMock_Delete_Call{Call: _e.mock.On("Delete", ctx, roleId)}
}

func (_c *RoleMock_Delete_Call) Run(run func(ctx context.Context, roleId types.Id)) *RoleMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *RoleMock_Delete_Call) Return(_a0 status.Object) *RoleMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleMock_Delete_Call) RunAndReturn(run func(context.Context, types.Id) status.Object) *RoleMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIds provides a mock function with given fields: ctx, ids
func (_m *RoleMock) FindByIds(ctx context.Context, ids ...types.Id) ([]dto.RoleResponseDTO, status.Object) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindByIds")
	}

	var r0 []dto.RoleResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) ([]dto.RoleResponseDTO, status.Object)); ok {
		return rf(ctx, ids...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) []dto.RoleResponseDTO); ok {
		r0 = rf(ctx, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.RoleResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...types.Id) status.Object); ok {
		r1 = rf(ctx, ids...)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// RoleMock_FindByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIds'
type RoleMock_FindByIds_Call struct {
	*mock.Call
}

// FindByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...types.Id
func (_e *RoleMock_Expecter) FindByIds(ctx interface{}, ids ...interface{}) *RoleMock_FindByIds_Call {
	return &RoleMock_FindByIds_Call{Call: _e.mock.On("FindByIds",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *RoleMock_FindByIds_Call) Run(run func(ctx context.Context, ids ...types.Id)) *RoleMock_FindByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Id, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Id)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *RoleMock_FindByIds_Call) Return(_a0 []dto.RoleResponseDTO, _a1 status.Object) *RoleMock_FindByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleMock_FindByIds_Call) RunAndReturn(run func(context.Context, ...types.Id) ([]dto.RoleResponseDTO, status.Object)) *RoleMock_FindByIds_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserId provides a mock function with given fields: ctx, userId
func (_m *RoleMock) FindByUserId(ctx context.Context, userId types.Id) ([]dto.RoleResponseDTO, status.Object) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserId")
	}

	var r0 []dto.RoleResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) ([]dto.RoleResponseDTO, status.Object)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) []dto.RoleResponseDTO); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.RoleResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Id) status.Object); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// RoleMock_FindByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserId'
type RoleMock_FindByUserId_Call struct {
	*mock.Call
}

// FindByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.Id
func (_e *RoleMock_Expecter) FindByUserId(ctx interface{}, userId interface{}) *RoleMock_FindByUserId_Call {
	return &RoleMock_FindByUserId_Call{Call: _e.mock.On("FindByUserId", ctx, userId)}
}

func (_c *RoleMock_FindByUserId_Call) Run(run func(ctx context.Context, userId types.Id)) *RoleMock_FindByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *RoleMock_FindByUserId_Call) Return(_a0 []dto.RoleResponseDTO, _a1 status.Object) *RoleMock_FindByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleMock_FindByUserId_Call) RunAndReturn(run func(context.Context, types.Id) ([]dto.RoleResponseDTO, status.Object)) *RoleMock_FindByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, input
func (_m *RoleMock) GetAll(ctx context.Context, input *shareddto.PagedElementDTO) (shareddto.PagedElementResult[dto.RoleResponseDTO], status.Object) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 shareddto.PagedElementResult[dto.RoleResponseDTO]
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *shareddto.PagedElementDTO) (shareddto.PagedElementResult[dto.RoleResponseDTO], status.Object)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shareddto.PagedElementDTO) shareddto.PagedElementResult[dto.RoleResponseDTO]); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(shareddto.PagedElementResult[dto.RoleResponseDTO])
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shareddto.PagedElementDTO) status.Object); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// RoleMock_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type RoleMock_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - input *shareddto.PagedElementDTO
func (_e *RoleMock_Expecter) GetAll(ctx interface{}, input interface{}) *RoleMock_GetAll_Call {
	return &RoleMock_GetAll_Call{Call: _e.mock.On("GetAll", ctx, input)}
}

func (_c *RoleMock_GetAll_Call) Run(run func(ctx context.Context, input *shareddto.PagedElementDTO)) *RoleMock_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*shareddto.PagedElementDTO))
	})
	return _c
}

func (_c *RoleMock_GetAll_Call) Return(_a0 shareddto.PagedElementResult[dto.RoleResponseDTO], _a1 status.Object) *RoleMock_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleMock_GetAll_Call) RunAndReturn(run func(context.Context, *shareddto.PagedElementDTO) (shareddto.PagedElementResult[dto.RoleResponseDTO], status.Object)) *RoleMock_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefault provides a mock function with given fields: ctx
func (_m *RoleMock) GetDefault(ctx context.Context) (dto.RoleResponseDTO, status.Object) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDefault")
	}

	var r0 dto.RoleResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context) (dto.RoleResponseDTO, status.Object)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) dto.RoleResponseDTO); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(dto.RoleResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context) status.Object); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// RoleMock_GetDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefault'
type RoleMock_GetDefault_Call struct {
	*mock.Call
}

// GetDefault is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RoleMock_Expecter) GetDefault(ctx interface{}) *RoleMock_GetDefault_Call {
	return &RoleMock_GetDefault_Call{Call: _e.mock.On("GetDefault", ctx)}
}

func (_c *RoleMock_GetDefault_Call) Run(run func(ctx context.Context)) *RoleMock_GetDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RoleMock_GetDefault_Call) Return(_a0 dto.RoleResponseDTO, _a1 status.Object) *RoleMock_GetDefault_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleMock_GetDefault_Call) RunAndReturn(run func(context.Context) (dto.RoleResponseDTO, status.Object)) *RoleMock_GetDefault_Call {
	_c.Call.Return(run)
	return _c
}

// GetSuper provides a mock function with given fields: ctx
func (_m *RoleMock) GetSuper(ctx context.Context) (dto.RoleResponseDTO, status.Object) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSuper")
	}

	var r0 dto.RoleResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context) (dto.RoleResponseDTO, status.Object)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) dto.RoleResponseDTO); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(dto.RoleResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context) status.Object); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// RoleMock_GetSuper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSuper'
type RoleMock_GetSuper_Call struct {
	*mock.Call
}

// GetSuper is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RoleMock_Expecter) GetSuper(ctx interface{}) *RoleMock_GetSuper_Call {
	return &RoleMock_GetSuper_Call{Call: _e.mock.On("GetSuper", ctx)}
}

func (_c *RoleMock_GetSuper_Call) Run(run func(ctx context.Context)) *RoleMock_GetSuper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RoleMock_GetSuper_Call) Return(_a0 dto.RoleResponseDTO, _a1 status.Object) *RoleMock_GetSuper_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleMock_GetSuper_Call) RunAndReturn(run func(context.Context) (dto.RoleResponseDTO, status.Object)) *RoleMock_GetSuper_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissions provides a mock function with given fields: ctx, modifyDTO
func (_m *RoleMock) RemovePermissions(ctx context.Context, modifyDTO *dto.ModifyRolesPermissionsDTO) status.Object {
	ret := _m.Called(ctx, modifyDTO)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermissions")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ModifyRolesPermissionsDTO) status.Object); ok {
		r0 = rf(ctx, modifyDTO)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// RoleMock_RemovePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissions'
type RoleMock_RemovePermissions_Call struct {
	*mock.Call
}

// RemovePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - modifyDTO *dto.ModifyRolesPermissionsDTO
func (_e *RoleMock_Expecter) RemovePermissions(ctx interface{}, modifyDTO interface{}) *RoleMock_RemovePermissions_Call {
	return &RoleMock_RemovePermissions_Call{Call: _e.mock.On("RemovePermissions", ctx, modifyDTO)}
}

func (_c *RoleMock_RemovePermissions_Call) Run(run func(ctx context.Context, modifyDTO *dto.ModifyRolesPermissionsDTO)) *RoleMock_RemovePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.ModifyRolesPermissionsDTO))
	})
	return _c
}

func (_c *RoleMock_RemovePermissions_Call) Return(_a0 status.Object) *RoleMock_RemovePermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleMock_RemovePermissions_Call) RunAndReturn(run func(context.Context, *dto.ModifyRolesPermissionsDTO) status.Object) *RoleMock_RemovePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUsers provides a mock function with given fields: ctx, usersDTO
func (_m *RoleMock) RemoveUsers(ctx context.Context, usersDTO *dto.ModifyUserRolesDTO) status.Object {
	ret := _m.Called(ctx, usersDTO)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUsers")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ModifyUserRolesDTO) status.Object); ok {
		r0 = rf(ctx, usersDTO)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// RoleMock_RemoveUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUsers'
type RoleMock_RemoveUsers_Call struct {
	*mock.Call
}

// RemoveUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - usersDTO *dto.ModifyUserRolesDTO
func (_e *RoleMock_Expecter) RemoveUsers(ctx interface{}, usersDTO interface{}) *RoleMock_RemoveUsers_Call {
	return &RoleMock_RemoveUsers_Call{Call: _e.mock.On("RemoveUsers", ctx, usersDTO)}
}

func (_c *RoleMock_RemoveUsers_Call) Run(run func(ctx context.Context, usersDTO *dto.ModifyUserRolesDTO)) *RoleMock_RemoveUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.ModifyUserRolesDTO))
	})
	return _c
}

func (_c *RoleMock_RemoveUsers_Call) Return(_a0 status.Object) *RoleMock_RemoveUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleMock_RemoveUsers_Call) RunAndReturn(run func(context.Context, *dto.ModifyUserRolesDTO) status.Object) *RoleMock_RemoveUsers_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserAsSuper provides a mock function with given fields: ctx, userId
func (_m *RoleMock) SetUserAsSuper(ctx context.Context, userId types.Id) status.Object {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for SetUserAsSuper")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) status.Object); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// RoleMock_SetUserAsSuper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserAsSuper'
type RoleMock_SetUserAsSuper_Call struct {
	*mock.Call
}

// SetUserAsSuper is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.Id
func (_e *RoleMock_Expecter) SetUserAsSuper(ctx interface{}, userId interface{}) *RoleMock_SetUserAsSuper_Call {
	return &RoleMock_SetUserAsSuper_Call{Call: _e.mock.On("SetUserAsSuper", ctx, userId)}
}

func (_c *RoleMock_SetUserAsSuper_Call) Run(run func(ctx context.Context, userId types.Id)) *RoleMock_SetUserAsSuper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *RoleMock_SetUserAsSuper_Call) Return(_a0 status.Object) *RoleMock_SetUserAsSuper_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleMock_SetUserAsSuper_Call) RunAndReturn(run func(context.Context, types.Id) status.Object) *RoleMock_SetUserAsSuper_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, updateDTO
func (_m *RoleMock) Update(ctx context.Context, updateDTO *dto.RoleUpdateDTO) status.Object {
	ret := _m.Called(ctx, updateDTO)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RoleUpdateDTO) status.Object); ok {
		r0 = rf(ctx, updateDTO)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// RoleMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RoleMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - updateDTO *dto.RoleUpdateDTO
func (_e *RoleMock_Expecter) Update(ctx interface{}, updateDTO interface{}) *RoleMock_Update_Call {
	return &RoleMock_Update_Call{Call: _e.mock.On("Update", ctx, updateDTO)}
}

func (_c *RoleMock_Update_Call) Run(run func(ctx context.Context, updateDTO *dto.RoleUpdateDTO)) *RoleMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.RoleUpdateDTO))
	})
	return _c
}

func (_c *RoleMock_Update_Call) Return(_a0 status.Object) *RoleMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleMock_Update_Call) RunAndReturn(run func(context.Context, *dto.RoleUpdateDTO) status.Object) *RoleMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoleMock creates a new instance of RoleMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoleMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoleMock {
	mock := &RoleMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
