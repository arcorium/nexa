// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/authorization/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	status "github.com/arcorium/nexa/shared/status"
)

// AuthorizationMock is an autogenerated mock type for the IAuthorization type
type AuthorizationMock struct {
	mock.Mock
}

type AuthorizationMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthorizationMock) EXPECT() *AuthorizationMock_Expecter {
	return &AuthorizationMock_Expecter{mock: &_m.Mock}
}

// IsAuthorized provides a mock function with given fields: ctx, authDto
func (_m *AuthorizationMock) IsAuthorized(ctx context.Context, authDto *dto.IsAuthorizationDTO) status.Object {
	ret := _m.Called(ctx, authDto)

	if len(ret) == 0 {
		panic("no return value specified for IsAuthorized")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.IsAuthorizationDTO) status.Object); ok {
		r0 = rf(ctx, authDto)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// AuthorizationMock_IsAuthorized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAuthorized'
type AuthorizationMock_IsAuthorized_Call struct {
	*mock.Call
}

// IsAuthorized is a helper method to define mock.On call
//   - ctx context.Context
//   - authDto *dto.IsAuthorizationDTO
func (_e *AuthorizationMock_Expecter) IsAuthorized(ctx interface{}, authDto interface{}) *AuthorizationMock_IsAuthorized_Call {
	return &AuthorizationMock_IsAuthorized_Call{Call: _e.mock.On("IsAuthorized", ctx, authDto)}
}

func (_c *AuthorizationMock_IsAuthorized_Call) Run(run func(ctx context.Context, authDto *dto.IsAuthorizationDTO)) *AuthorizationMock_IsAuthorized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.IsAuthorizationDTO))
	})
	return _c
}

func (_c *AuthorizationMock_IsAuthorized_Call) Return(_a0 status.Object) *AuthorizationMock_IsAuthorized_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthorizationMock_IsAuthorized_Call) RunAndReturn(run func(context.Context, *dto.IsAuthorizationDTO) status.Object) *AuthorizationMock_IsAuthorized_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthorizationMock creates a new instance of AuthorizationMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorizationMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorizationMock {
	mock := &AuthorizationMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
