// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "nexa/services/authorization/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	repo "nexa/shared/util/repo"

	types "nexa/shared/types"
)

// PermissionMock is an autogenerated mock type for the IPermission type
type PermissionMock struct {
	mock.Mock
}

type PermissionMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PermissionMock) EXPECT() *PermissionMock_Expecter {
	return &PermissionMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, permission
func (_m *PermissionMock) Create(ctx context.Context, permission *entity.Permission) error {
	ret := _m.Called(ctx, permission)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Permission) error); ok {
		r0 = rf(ctx, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PermissionMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PermissionMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - permission *entity.Permission
func (_e *PermissionMock_Expecter) Create(ctx interface{}, permission interface{}) *PermissionMock_Create_Call {
	return &PermissionMock_Create_Call{Call: _e.mock.On("Create", ctx, permission)}
}

func (_c *PermissionMock_Create_Call) Run(run func(ctx context.Context, permission *entity.Permission)) *PermissionMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Permission))
	})
	return _c
}

func (_c *PermissionMock_Create_Call) Return(_a0 error) *PermissionMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PermissionMock_Create_Call) RunAndReturn(run func(context.Context, *entity.Permission) error) *PermissionMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PermissionMock) Delete(ctx context.Context, id types.Id) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PermissionMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PermissionMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id types.Id
func (_e *PermissionMock_Expecter) Delete(ctx interface{}, id interface{}) *PermissionMock_Delete_Call {
	return &PermissionMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *PermissionMock_Delete_Call) Run(run func(ctx context.Context, id types.Id)) *PermissionMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *PermissionMock_Delete_Call) Return(_a0 error) *PermissionMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PermissionMock_Delete_Call) RunAndReturn(run func(context.Context, types.Id) error) *PermissionMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIds provides a mock function with given fields: ctx, ids
func (_m *PermissionMock) FindByIds(ctx context.Context, ids ...types.Id) ([]entity.Permission, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindByIds")
	}

	var r0 []entity.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) ([]entity.Permission, error)); ok {
		return rf(ctx, ids...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) []entity.Permission); ok {
		r0 = rf(ctx, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...types.Id) error); ok {
		r1 = rf(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PermissionMock_FindByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIds'
type PermissionMock_FindByIds_Call struct {
	*mock.Call
}

// FindByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...types.Id
func (_e *PermissionMock_Expecter) FindByIds(ctx interface{}, ids ...interface{}) *PermissionMock_FindByIds_Call {
	return &PermissionMock_FindByIds_Call{Call: _e.mock.On("FindByIds",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *PermissionMock_FindByIds_Call) Run(run func(ctx context.Context, ids ...types.Id)) *PermissionMock_FindByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Id, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Id)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *PermissionMock_FindByIds_Call) Return(_a0 []entity.Permission, _a1 error) *PermissionMock_FindByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PermissionMock_FindByIds_Call) RunAndReturn(run func(context.Context, ...types.Id) ([]entity.Permission, error)) *PermissionMock_FindByIds_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRoleIds provides a mock function with given fields: ctx, roleIds
func (_m *PermissionMock) FindByRoleIds(ctx context.Context, roleIds ...types.Id) ([]entity.Permission, error) {
	_va := make([]interface{}, len(roleIds))
	for _i := range roleIds {
		_va[_i] = roleIds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindByRoleIds")
	}

	var r0 []entity.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) ([]entity.Permission, error)); ok {
		return rf(ctx, roleIds...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) []entity.Permission); ok {
		r0 = rf(ctx, roleIds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...types.Id) error); ok {
		r1 = rf(ctx, roleIds...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PermissionMock_FindByRoleIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRoleIds'
type PermissionMock_FindByRoleIds_Call struct {
	*mock.Call
}

// FindByRoleIds is a helper method to define mock.On call
//   - ctx context.Context
//   - roleIds ...types.Id
func (_e *PermissionMock_Expecter) FindByRoleIds(ctx interface{}, roleIds ...interface{}) *PermissionMock_FindByRoleIds_Call {
	return &PermissionMock_FindByRoleIds_Call{Call: _e.mock.On("FindByRoleIds",
		append([]interface{}{ctx}, roleIds...)...)}
}

func (_c *PermissionMock_FindByRoleIds_Call) Run(run func(ctx context.Context, roleIds ...types.Id)) *PermissionMock_FindByRoleIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Id, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Id)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *PermissionMock_FindByRoleIds_Call) Return(_a0 []entity.Permission, _a1 error) *PermissionMock_FindByRoleIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PermissionMock_FindByRoleIds_Call) RunAndReturn(run func(context.Context, ...types.Id) ([]entity.Permission, error)) *PermissionMock_FindByRoleIds_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, parameter
func (_m *PermissionMock) Get(ctx context.Context, parameter repo.QueryParameter) (repo.PaginatedResult[entity.Permission], error) {
	ret := _m.Called(ctx, parameter)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 repo.PaginatedResult[entity.Permission]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.QueryParameter) (repo.PaginatedResult[entity.Permission], error)); ok {
		return rf(ctx, parameter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.QueryParameter) repo.PaginatedResult[entity.Permission]); ok {
		r0 = rf(ctx, parameter)
	} else {
		r0 = ret.Get(0).(repo.PaginatedResult[entity.Permission])
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.QueryParameter) error); ok {
		r1 = rf(ctx, parameter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PermissionMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type PermissionMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - parameter repo.QueryParameter
func (_e *PermissionMock_Expecter) Get(ctx interface{}, parameter interface{}) *PermissionMock_Get_Call {
	return &PermissionMock_Get_Call{Call: _e.mock.On("Get", ctx, parameter)}
}

func (_c *PermissionMock_Get_Call) Run(run func(ctx context.Context, parameter repo.QueryParameter)) *PermissionMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo.QueryParameter))
	})
	return _c
}

func (_c *PermissionMock_Get_Call) Return(_a0 repo.PaginatedResult[entity.Permission], _a1 error) *PermissionMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PermissionMock_Get_Call) RunAndReturn(run func(context.Context, repo.QueryParameter) (repo.PaginatedResult[entity.Permission], error)) *PermissionMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewPermissionMock creates a new instance of PermissionMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPermissionMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PermissionMock {
	mock := &PermissionMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
