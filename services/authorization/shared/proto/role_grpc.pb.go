// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: role.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	proto "nexa/shared/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoleService_Create_FullMethodName            = "/services.authorization.schema.proto.v1.RoleService/Create"
	RoleService_Update_FullMethodName            = "/services.authorization.schema.proto.v1.RoleService/Update"
	RoleService_Delete_FullMethodName            = "/services.authorization.schema.proto.v1.RoleService/Delete"
	RoleService_Find_FullMethodName              = "/services.authorization.schema.proto.v1.RoleService/Find"
	RoleService_FindAll_FullMethodName           = "/services.authorization.schema.proto.v1.RoleService/FindAll"
	RoleService_AddPermissions_FullMethodName    = "/services.authorization.schema.proto.v1.RoleService/AddPermissions"
	RoleService_RemovePermissions_FullMethodName = "/services.authorization.schema.proto.v1.RoleService/RemovePermissions"
	RoleService_AddUsers_FullMethodName          = "/services.authorization.schema.proto.v1.RoleService/AddUsers"
	RoleService_RemoveUsers_FullMethodName       = "/services.authorization.schema.proto.v1.RoleService/RemoveUsers"
)

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	Create(ctx context.Context, in *RoleCreateInput, opts ...grpc.CallOption) (*RoleCreateOutput, error)
	Update(ctx context.Context, in *RoleUpdateInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *RoleDeleteInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Find(ctx context.Context, in *RoleFindInput, opts ...grpc.CallOption) (*RoleFindOutput, error)
	FindAll(ctx context.Context, in *proto.PagedElementInput, opts ...grpc.CallOption) (*RoleFindAllOutput, error)
	AddPermissions(ctx context.Context, in *RoleAddPermissionsInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemovePermissions(ctx context.Context, in *RoleRemovePermissionsInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddUsers(ctx context.Context, in *RoleAddUserInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveUsers(ctx context.Context, in *RoleRemoveUserInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) Create(ctx context.Context, in *RoleCreateInput, opts ...grpc.CallOption) (*RoleCreateOutput, error) {
	out := new(RoleCreateOutput)
	err := c.cc.Invoke(ctx, RoleService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) Update(ctx context.Context, in *RoleUpdateInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) Delete(ctx context.Context, in *RoleDeleteInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) Find(ctx context.Context, in *RoleFindInput, opts ...grpc.CallOption) (*RoleFindOutput, error) {
	out := new(RoleFindOutput)
	err := c.cc.Invoke(ctx, RoleService_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) FindAll(ctx context.Context, in *proto.PagedElementInput, opts ...grpc.CallOption) (*RoleFindAllOutput, error) {
	out := new(RoleFindAllOutput)
	err := c.cc.Invoke(ctx, RoleService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) AddPermissions(ctx context.Context, in *RoleAddPermissionsInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_AddPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) RemovePermissions(ctx context.Context, in *RoleRemovePermissionsInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_RemovePermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) AddUsers(ctx context.Context, in *RoleAddUserInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_AddUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) RemoveUsers(ctx context.Context, in *RoleRemoveUserInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_RemoveUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations must embed UnimplementedRoleServiceServer
// for forward compatibility
type RoleServiceServer interface {
	Create(context.Context, *RoleCreateInput) (*RoleCreateOutput, error)
	Update(context.Context, *RoleUpdateInput) (*emptypb.Empty, error)
	Delete(context.Context, *RoleDeleteInput) (*emptypb.Empty, error)
	Find(context.Context, *RoleFindInput) (*RoleFindOutput, error)
	FindAll(context.Context, *proto.PagedElementInput) (*RoleFindAllOutput, error)
	AddPermissions(context.Context, *RoleAddPermissionsInput) (*emptypb.Empty, error)
	RemovePermissions(context.Context, *RoleRemovePermissionsInput) (*emptypb.Empty, error)
	AddUsers(context.Context, *RoleAddUserInput) (*emptypb.Empty, error)
	RemoveUsers(context.Context, *RoleRemoveUserInput) (*emptypb.Empty, error)
	mustEmbedUnimplementedRoleServiceServer()
}

// UnimplementedRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleServiceServer struct {
}

func (UnimplementedRoleServiceServer) Create(context.Context, *RoleCreateInput) (*RoleCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoleServiceServer) Update(context.Context, *RoleUpdateInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRoleServiceServer) Delete(context.Context, *RoleDeleteInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRoleServiceServer) Find(context.Context, *RoleFindInput) (*RoleFindOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedRoleServiceServer) FindAll(context.Context, *proto.PagedElementInput) (*RoleFindAllOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedRoleServiceServer) AddPermissions(context.Context, *RoleAddPermissionsInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissions not implemented")
}
func (UnimplementedRoleServiceServer) RemovePermissions(context.Context, *RoleRemovePermissionsInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissions not implemented")
}
func (UnimplementedRoleServiceServer) AddUsers(context.Context, *RoleAddUserInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsers not implemented")
}
func (UnimplementedRoleServiceServer) RemoveUsers(context.Context, *RoleRemoveUserInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUsers not implemented")
}
func (UnimplementedRoleServiceServer) mustEmbedUnimplementedRoleServiceServer() {}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).Create(ctx, req.(*RoleCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).Update(ctx, req.(*RoleUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).Delete(ctx, req.(*RoleDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleFindInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).Find(ctx, req.(*RoleFindInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.PagedElementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).FindAll(ctx, req.(*proto.PagedElementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_AddPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAddPermissionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).AddPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_AddPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).AddPermissions(ctx, req.(*RoleAddPermissionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_RemovePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRemovePermissionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).RemovePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_RemovePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).RemovePermissions(ctx, req.(*RoleRemovePermissionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_AddUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAddUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).AddUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_AddUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).AddUsers(ctx, req.(*RoleAddUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_RemoveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRemoveUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).RemoveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_RemoveUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).RemoveUsers(ctx, req.(*RoleRemoveUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.authorization.schema.proto.v1.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RoleService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RoleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RoleService_Delete_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _RoleService_Find_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _RoleService_FindAll_Handler,
		},
		{
			MethodName: "AddPermissions",
			Handler:    _RoleService_AddPermissions_Handler,
		},
		{
			MethodName: "RemovePermissions",
			Handler:    _RoleService_RemovePermissions_Handler,
		},
		{
			MethodName: "AddUsers",
			Handler:    _RoleService_AddUsers_Handler,
		},
		{
			MethodName: "RemoveUsers",
			Handler:    _RoleService_RemoveUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role.proto",
}
