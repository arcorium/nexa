// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: action.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	proto "nexa/shared/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActionServer_Create_FullMethodName  = "/services.authorization.schema.proto.v1.ActionServer/Create"
	ActionServer_Update_FullMethodName  = "/services.authorization.schema.proto.v1.ActionServer/Update"
	ActionServer_Delete_FullMethodName  = "/services.authorization.schema.proto.v1.ActionServer/Delete"
	ActionServer_Find_FullMethodName    = "/services.authorization.schema.proto.v1.ActionServer/Find"
	ActionServer_FindAll_FullMethodName = "/services.authorization.schema.proto.v1.ActionServer/FindAll"
)

// ActionServerClient is the client API for ActionServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionServerClient interface {
	Create(ctx context.Context, in *ActionCreateInput, opts ...grpc.CallOption) (*ActionCreateOutput, error)
	Update(ctx context.Context, in *ActionUpdateInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *ActionDeleteInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Find(ctx context.Context, in *ActionFindInput, opts ...grpc.CallOption) (*ActionResponse, error)
	FindAll(ctx context.Context, in *proto.PagedElementInput, opts ...grpc.CallOption) (*ActionFindAllResponse, error)
}

type actionServerClient struct {
	cc grpc.ClientConnInterface
}

func NewActionServerClient(cc grpc.ClientConnInterface) ActionServerClient {
	return &actionServerClient{cc}
}

func (c *actionServerClient) Create(ctx context.Context, in *ActionCreateInput, opts ...grpc.CallOption) (*ActionCreateOutput, error) {
	out := new(ActionCreateOutput)
	err := c.cc.Invoke(ctx, ActionServer_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServerClient) Update(ctx context.Context, in *ActionUpdateInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActionServer_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServerClient) Delete(ctx context.Context, in *ActionDeleteInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActionServer_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServerClient) Find(ctx context.Context, in *ActionFindInput, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, ActionServer_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServerClient) FindAll(ctx context.Context, in *proto.PagedElementInput, opts ...grpc.CallOption) (*ActionFindAllResponse, error) {
	out := new(ActionFindAllResponse)
	err := c.cc.Invoke(ctx, ActionServer_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionServerServer is the server API for ActionServer service.
// All implementations must embed UnimplementedActionServerServer
// for forward compatibility
type ActionServerServer interface {
	Create(context.Context, *ActionCreateInput) (*ActionCreateOutput, error)
	Update(context.Context, *ActionUpdateInput) (*emptypb.Empty, error)
	Delete(context.Context, *ActionDeleteInput) (*emptypb.Empty, error)
	Find(context.Context, *ActionFindInput) (*ActionResponse, error)
	FindAll(context.Context, *proto.PagedElementInput) (*ActionFindAllResponse, error)
	mustEmbedUnimplementedActionServerServer()
}

// UnimplementedActionServerServer must be embedded to have forward compatible implementations.
type UnimplementedActionServerServer struct {
}

func (UnimplementedActionServerServer) Create(context.Context, *ActionCreateInput) (*ActionCreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedActionServerServer) Update(context.Context, *ActionUpdateInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedActionServerServer) Delete(context.Context, *ActionDeleteInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedActionServerServer) Find(context.Context, *ActionFindInput) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedActionServerServer) FindAll(context.Context, *proto.PagedElementInput) (*ActionFindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedActionServerServer) mustEmbedUnimplementedActionServerServer() {}

// UnsafeActionServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionServerServer will
// result in compilation errors.
type UnsafeActionServerServer interface {
	mustEmbedUnimplementedActionServerServer()
}

func RegisterActionServerServer(s grpc.ServiceRegistrar, srv ActionServerServer) {
	s.RegisterService(&ActionServer_ServiceDesc, srv)
}

func _ActionServer_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionServer_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServerServer).Create(ctx, req.(*ActionCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionServer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionServer_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServerServer).Update(ctx, req.(*ActionUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionServer_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServerServer).Delete(ctx, req.(*ActionDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionServer_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionFindInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServerServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionServer_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServerServer).Find(ctx, req.(*ActionFindInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionServer_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.PagedElementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServerServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionServer_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServerServer).FindAll(ctx, req.(*proto.PagedElementInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ActionServer_ServiceDesc is the grpc.ServiceDesc for ActionServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.authorization.schema.proto.v1.ActionServer",
	HandlerType: (*ActionServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ActionServer_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ActionServer_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ActionServer_Delete_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _ActionServer_Find_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _ActionServer_FindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "action.proto",
}
