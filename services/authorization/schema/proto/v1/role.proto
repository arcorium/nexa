syntax = "proto3";
package services.authorization.schema.proto.v1;
option go_package = "nexa/services/authorization/shared/proto";

import "google/protobuf/empty.proto";
import "arc/paged.proto";

service RoleService {
  rpc Create(RoleCreateInput) returns (RoleCreateOutput);
  rpc Update(RoleUpdateInput) returns (google.protobuf.Empty);
  rpc Delete(RoleDeleteInput) returns (google.protobuf.Empty);
  rpc Find(RoleFindInput) returns (RoleFindOutput);
  rpc FindByUserId(RoleFindByUserIdInput) returns (RoleFindByUserIdOutput);
  rpc FindAll(arc.PagedElementInput) returns (RoleFindAllOutput);
  rpc AddPermissions(RoleAddPermissionsInput) returns (google.protobuf.Empty);
  rpc RemovePermissions(RoleRemovePermissionsInput) returns (google.protobuf.Empty);
  rpc AddUsers(RoleAddUserInput) returns (google.protobuf.Empty);
  rpc RemoveUsers(RoleRemoveUserInput) returns (google.protobuf.Empty);
}

message RoleCreateInput {
  string name = 1;
  optional string description = 2;
}

message RoleCreateOutput {
  string id = 1;
}

message RoleUpdateInput {
  string id = 1;
  optional string name = 2;
  optional string description = 3;
}

message RoleDeleteInput {
  string id = 1;
}

message RoleFindInput {
  repeated string ids = 1;
}

message RoleFindOutput {
  repeated RoleResponse roles = 1;
}

message RoleFindByUserIdInput {
  string userId = 1;
}

message RoleFindByUserIdOutput {
  repeated RoleResponse roles = 1;
}


message RoleFindAllOutput {
  arc.PagedElementOutput details = 1;
  repeated RoleResponse roles = 2;
}

message RoleResponse {
  string id = 1;
  string name = 2;
  string description = 3;
}

message RoleAddPermissionsInput {
  string role_id = 1;
  repeated string permission_ids = 2;
}

message RoleRemovePermissionsInput {
  string role_id = 1;
  repeated string permission_ids = 2;
}

message RoleAddUserInput {
  string user_id = 1;
  repeated string role_ids = 2;
}

message RoleRemoveUserInput {
  string user_id = 1;
  repeated string role_ids = 2;
}