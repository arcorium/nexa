// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: services/user/schema/proto/v1/profile.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProfileService_Find_FullMethodName         = "/services.user.schema.proto.v1.ProfileService/Find"
	ProfileService_Update_FullMethodName       = "/services.user.schema.proto.v1.ProfileService/Update"
	ProfileService_UpdateAvatar_FullMethodName = "/services.user.schema.proto.v1.ProfileService/UpdateAvatar"
)

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileServiceClient interface {
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (ProfileService_FindClient, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	UpdateAvatar(ctx context.Context, opts ...grpc.CallOption) (ProfileService_UpdateAvatarClient, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (ProfileService_FindClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProfileService_ServiceDesc.Streams[0], ProfileService_Find_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceFindClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_FindClient interface {
	Recv() (*FindResponse, error)
	grpc.ClientStream
}

type profileServiceFindClient struct {
	grpc.ClientStream
}

func (x *profileServiceFindClient) Recv() (*FindResponse, error) {
	m := new(FindResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, ProfileService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateAvatar(ctx context.Context, opts ...grpc.CallOption) (ProfileService_UpdateAvatarClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProfileService_ServiceDesc.Streams[1], ProfileService_UpdateAvatar_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceUpdateAvatarClient{stream}
	return x, nil
}

type ProfileService_UpdateAvatarClient interface {
	Send(*UpdateAvatarRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type profileServiceUpdateAvatarClient struct {
	grpc.ClientStream
}

func (x *profileServiceUpdateAvatarClient) Send(m *UpdateAvatarRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *profileServiceUpdateAvatarClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility
type ProfileServiceServer interface {
	Find(*FindRequest, ProfileService_FindServer) error
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	UpdateAvatar(ProfileService_UpdateAvatarServer) error
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct {
}

func (UnimplementedProfileServiceServer) Find(*FindRequest, ProfileService_FindServer) error {
	return status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedProfileServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProfileServiceServer) UpdateAvatar(ProfileService_UpdateAvatarServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateAvatar not implemented")
}
func (UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}

// UnsafeProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceServer will
// result in compilation errors.
type UnsafeProfileServiceServer interface {
	mustEmbedUnimplementedProfileServiceServer()
}

func RegisterProfileServiceServer(s grpc.ServiceRegistrar, srv ProfileServiceServer) {
	s.RegisterService(&ProfileService_ServiceDesc, srv)
}

func _ProfileService_Find_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).Find(m, &profileServiceFindServer{stream})
}

type ProfileService_FindServer interface {
	Send(*FindResponse) error
	grpc.ServerStream
}

type profileServiceFindServer struct {
	grpc.ServerStream
}

func (x *profileServiceFindServer) Send(m *FindResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateAvatar_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProfileServiceServer).UpdateAvatar(&profileServiceUpdateAvatarServer{stream})
}

type ProfileService_UpdateAvatarServer interface {
	SendAndClose(*Empty) error
	Recv() (*UpdateAvatarRequest, error)
	grpc.ServerStream
}

type profileServiceUpdateAvatarServer struct {
	grpc.ServerStream
}

func (x *profileServiceUpdateAvatarServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *profileServiceUpdateAvatarServer) Recv() (*UpdateAvatarRequest, error) {
	m := new(UpdateAvatarRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProfileService_ServiceDesc is the grpc.ServiceDesc for ProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.user.schema.proto.v1.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _ProfileService_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Find",
			Handler:       _ProfileService_Find_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateAvatar",
			Handler:       _ProfileService_UpdateAvatar_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/user/schema/proto/v1/profile.proto",
}
