// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/user/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// MailerClientMock is an autogenerated mock type for the IMailerClient type
type MailerClientMock struct {
	mock.Mock
}

type MailerClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MailerClientMock) EXPECT() *MailerClientMock_Expecter {
	return &MailerClientMock_Expecter{mock: &_m.Mock}
}

// SendEmailVerification provides a mock function with given fields: ctx, _a1
func (_m *MailerClientMock) SendEmailVerification(ctx context.Context, _a1 *dto.SendEmailVerificationDTO) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SendEmailVerification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SendEmailVerificationDTO) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MailerClientMock_SendEmailVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmailVerification'
type MailerClientMock_SendEmailVerification_Call struct {
	*mock.Call
}

// SendEmailVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *dto.SendEmailVerificationDTO
func (_e *MailerClientMock_Expecter) SendEmailVerification(ctx interface{}, _a1 interface{}) *MailerClientMock_SendEmailVerification_Call {
	return &MailerClientMock_SendEmailVerification_Call{Call: _e.mock.On("SendEmailVerification", ctx, _a1)}
}

func (_c *MailerClientMock_SendEmailVerification_Call) Run(run func(ctx context.Context, _a1 *dto.SendEmailVerificationDTO)) *MailerClientMock_SendEmailVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.SendEmailVerificationDTO))
	})
	return _c
}

func (_c *MailerClientMock_SendEmailVerification_Call) Return(_a0 error) *MailerClientMock_SendEmailVerification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MailerClientMock_SendEmailVerification_Call) RunAndReturn(run func(context.Context, *dto.SendEmailVerificationDTO) error) *MailerClientMock_SendEmailVerification_Call {
	_c.Call.Return(run)
	return _c
}

// SendForgotPassword provides a mock function with given fields: ctx, passwordDTO
func (_m *MailerClientMock) SendForgotPassword(ctx context.Context, passwordDTO *dto.SendForgotPasswordDTO) error {
	ret := _m.Called(ctx, passwordDTO)

	if len(ret) == 0 {
		panic("no return value specified for SendForgotPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SendForgotPasswordDTO) error); ok {
		r0 = rf(ctx, passwordDTO)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MailerClientMock_SendForgotPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendForgotPassword'
type MailerClientMock_SendForgotPassword_Call struct {
	*mock.Call
}

// SendForgotPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - passwordDTO *dto.SendForgotPasswordDTO
func (_e *MailerClientMock_Expecter) SendForgotPassword(ctx interface{}, passwordDTO interface{}) *MailerClientMock_SendForgotPassword_Call {
	return &MailerClientMock_SendForgotPassword_Call{Call: _e.mock.On("SendForgotPassword", ctx, passwordDTO)}
}

func (_c *MailerClientMock_SendForgotPassword_Call) Run(run func(ctx context.Context, passwordDTO *dto.SendForgotPasswordDTO)) *MailerClientMock_SendForgotPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.SendForgotPasswordDTO))
	})
	return _c
}

func (_c *MailerClientMock_SendForgotPassword_Call) Return(_a0 error) *MailerClientMock_SendForgotPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MailerClientMock_SendForgotPassword_Call) RunAndReturn(run func(context.Context, *dto.SendForgotPasswordDTO) error) *MailerClientMock_SendForgotPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMailerClientMock creates a new instance of MailerClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailerClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MailerClientMock {
	mock := &MailerClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
