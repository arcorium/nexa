// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "nexa/services/user/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	types "github.com/arcorium/nexa/shared/types"
)

// ProfileMock is an autogenerated mock type for the IProfile type
type ProfileMock struct {
	mock.Mock
}

type ProfileMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ProfileMock) EXPECT() *ProfileMock_Expecter {
	return &ProfileMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, profile
func (_m *ProfileMock) Create(ctx context.Context, profile *entity.Profile) error {
	ret := _m.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Profile) error); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProfileMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ProfileMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - profile *entity.Profile
func (_e *ProfileMock_Expecter) Create(ctx interface{}, profile interface{}) *ProfileMock_Create_Call {
	return &ProfileMock_Create_Call{Call: _e.mock.On("Create", ctx, profile)}
}

func (_c *ProfileMock_Create_Call) Run(run func(ctx context.Context, profile *entity.Profile)) *ProfileMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Profile))
	})
	return _c
}

func (_c *ProfileMock_Create_Call) Return(_a0 error) *ProfileMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProfileMock_Create_Call) RunAndReturn(run func(context.Context, *entity.Profile) error) *ProfileMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIds provides a mock function with given fields: ctx, userIds
func (_m *ProfileMock) FindByIds(ctx context.Context, userIds ...types.Id) ([]entity.Profile, error) {
	_va := make([]interface{}, len(userIds))
	for _i := range userIds {
		_va[_i] = userIds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindByIds")
	}

	var r0 []entity.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) ([]entity.Profile, error)); ok {
		return rf(ctx, userIds...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) []entity.Profile); ok {
		r0 = rf(ctx, userIds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...types.Id) error); ok {
		r1 = rf(ctx, userIds...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileMock_FindByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIds'
type ProfileMock_FindByIds_Call struct {
	*mock.Call
}

// FindByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - userIds ...types.Id
func (_e *ProfileMock_Expecter) FindByIds(ctx interface{}, userIds ...interface{}) *ProfileMock_FindByIds_Call {
	return &ProfileMock_FindByIds_Call{Call: _e.mock.On("FindByIds",
		append([]interface{}{ctx}, userIds...)...)}
}

func (_c *ProfileMock_FindByIds_Call) Run(run func(ctx context.Context, userIds ...types.Id)) *ProfileMock_FindByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Id, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Id)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *ProfileMock_FindByIds_Call) Return(_a0 []entity.Profile, _a1 error) *ProfileMock_FindByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileMock_FindByIds_Call) RunAndReturn(run func(context.Context, ...types.Id) ([]entity.Profile, error)) *ProfileMock_FindByIds_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserId provides a mock function with given fields: ctx, userId
func (_m *ProfileMock) FindByUserId(ctx context.Context, userId types.Id) (*entity.Profile, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserId")
	}

	var r0 *entity.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) (*entity.Profile, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) *entity.Profile); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Id) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileMock_FindByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserId'
type ProfileMock_FindByUserId_Call struct {
	*mock.Call
}

// FindByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.Id
func (_e *ProfileMock_Expecter) FindByUserId(ctx interface{}, userId interface{}) *ProfileMock_FindByUserId_Call {
	return &ProfileMock_FindByUserId_Call{Call: _e.mock.On("FindByUserId", ctx, userId)}
}

func (_c *ProfileMock_FindByUserId_Call) Run(run func(ctx context.Context, userId types.Id)) *ProfileMock_FindByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *ProfileMock_FindByUserId_Call) Return(_a0 *entity.Profile, _a1 error) *ProfileMock_FindByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileMock_FindByUserId_Call) RunAndReturn(run func(context.Context, types.Id) (*entity.Profile, error)) *ProfileMock_FindByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, profile
func (_m *ProfileMock) Patch(ctx context.Context, profile *entity.PatchedProfile) error {
	ret := _m.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.PatchedProfile) error); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProfileMock_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type ProfileMock_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - profile *entity.PatchedProfile
func (_e *ProfileMock_Expecter) Patch(ctx interface{}, profile interface{}) *ProfileMock_Patch_Call {
	return &ProfileMock_Patch_Call{Call: _e.mock.On("Patch", ctx, profile)}
}

func (_c *ProfileMock_Patch_Call) Run(run func(ctx context.Context, profile *entity.PatchedProfile)) *ProfileMock_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.PatchedProfile))
	})
	return _c
}

func (_c *ProfileMock_Patch_Call) Return(_a0 error) *ProfileMock_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProfileMock_Patch_Call) RunAndReturn(run func(context.Context, *entity.PatchedProfile) error) *ProfileMock_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, profile
func (_m *ProfileMock) Update(ctx context.Context, profile *entity.Profile) error {
	ret := _m.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Profile) error); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProfileMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ProfileMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - profile *entity.Profile
func (_e *ProfileMock_Expecter) Update(ctx interface{}, profile interface{}) *ProfileMock_Update_Call {
	return &ProfileMock_Update_Call{Call: _e.mock.On("Update", ctx, profile)}
}

func (_c *ProfileMock_Update_Call) Run(run func(ctx context.Context, profile *entity.Profile)) *ProfileMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Profile))
	})
	return _c
}

func (_c *ProfileMock_Update_Call) Return(_a0 error) *ProfileMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProfileMock_Update_Call) RunAndReturn(run func(context.Context, *entity.Profile) error) *ProfileMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewProfileMock creates a new instance of ProfileMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileMock {
	mock := &ProfileMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
