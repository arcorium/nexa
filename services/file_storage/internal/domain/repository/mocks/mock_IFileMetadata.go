// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "nexa/services/file_storage/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	types "github.com/arcorium/nexa/shared/types"
)

// FileMetadataMock is an autogenerated mock type for the IFileMetadata type
type FileMetadataMock struct {
	mock.Mock
}

type FileMetadataMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FileMetadataMock) EXPECT() *FileMetadataMock_Expecter {
	return &FileMetadataMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, metadata
func (_m *FileMetadataMock) Create(ctx context.Context, metadata *entity.FileMetadata) error {
	ret := _m.Called(ctx, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.FileMetadata) error); ok {
		r0 = rf(ctx, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileMetadataMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type FileMetadataMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - metadata *entity.FileMetadata
func (_e *FileMetadataMock_Expecter) Create(ctx interface{}, metadata interface{}) *FileMetadataMock_Create_Call {
	return &FileMetadataMock_Create_Call{Call: _e.mock.On("Create", ctx, metadata)}
}

func (_c *FileMetadataMock_Create_Call) Run(run func(ctx context.Context, metadata *entity.FileMetadata)) *FileMetadataMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.FileMetadata))
	})
	return _c
}

func (_c *FileMetadataMock_Create_Call) Return(_a0 error) *FileMetadataMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileMetadataMock_Create_Call) RunAndReturn(run func(context.Context, *entity.FileMetadata) error) *FileMetadataMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *FileMetadataMock) DeleteById(ctx context.Context, id types.Id) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileMetadataMock_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type FileMetadataMock_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id types.Id
func (_e *FileMetadataMock_Expecter) DeleteById(ctx interface{}, id interface{}) *FileMetadataMock_DeleteById_Call {
	return &FileMetadataMock_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *FileMetadataMock_DeleteById_Call) Run(run func(ctx context.Context, id types.Id)) *FileMetadataMock_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *FileMetadataMock_DeleteById_Call) Return(_a0 error) *FileMetadataMock_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileMetadataMock_DeleteById_Call) RunAndReturn(run func(context.Context, types.Id) error) *FileMetadataMock_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *FileMetadataMock) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileMetadataMock_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type FileMetadataMock_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *FileMetadataMock_Expecter) DeleteByName(ctx interface{}, name interface{}) *FileMetadataMock_DeleteByName_Call {
	return &FileMetadataMock_DeleteByName_Call{Call: _e.mock.On("DeleteByName", ctx, name)}
}

func (_c *FileMetadataMock_DeleteByName_Call) Run(run func(ctx context.Context, name string)) *FileMetadataMock_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FileMetadataMock_DeleteByName_Call) Return(_a0 error) *FileMetadataMock_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileMetadataMock_DeleteByName_Call) RunAndReturn(run func(context.Context, string) error) *FileMetadataMock_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIds provides a mock function with given fields: ctx, ids
func (_m *FileMetadataMock) FindByIds(ctx context.Context, ids ...types.Id) ([]entity.FileMetadata, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindByIds")
	}

	var r0 []entity.FileMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) ([]entity.FileMetadata, error)); ok {
		return rf(ctx, ids...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) []entity.FileMetadata); ok {
		r0 = rf(ctx, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.FileMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...types.Id) error); ok {
		r1 = rf(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileMetadataMock_FindByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIds'
type FileMetadataMock_FindByIds_Call struct {
	*mock.Call
}

// FindByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...types.Id
func (_e *FileMetadataMock_Expecter) FindByIds(ctx interface{}, ids ...interface{}) *FileMetadataMock_FindByIds_Call {
	return &FileMetadataMock_FindByIds_Call{Call: _e.mock.On("FindByIds",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *FileMetadataMock_FindByIds_Call) Run(run func(ctx context.Context, ids ...types.Id)) *FileMetadataMock_FindByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Id, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Id)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *FileMetadataMock_FindByIds_Call) Return(_a0 []entity.FileMetadata, _a1 error) *FileMetadataMock_FindByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileMetadataMock_FindByIds_Call) RunAndReturn(run func(context.Context, ...types.Id) ([]entity.FileMetadata, error)) *FileMetadataMock_FindByIds_Call {
	_c.Call.Return(run)
	return _c
}

// FindByNames provides a mock function with given fields: ctx, names
func (_m *FileMetadataMock) FindByNames(ctx context.Context, names ...string) ([]entity.FileMetadata, error) {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindByNames")
	}

	var r0 []entity.FileMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) ([]entity.FileMetadata, error)); ok {
		return rf(ctx, names...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) []entity.FileMetadata); ok {
		r0 = rf(ctx, names...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.FileMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, names...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileMetadataMock_FindByNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByNames'
type FileMetadataMock_FindByNames_Call struct {
	*mock.Call
}

// FindByNames is a helper method to define mock.On call
//   - ctx context.Context
//   - names ...string
func (_e *FileMetadataMock_Expecter) FindByNames(ctx interface{}, names ...interface{}) *FileMetadataMock_FindByNames_Call {
	return &FileMetadataMock_FindByNames_Call{Call: _e.mock.On("FindByNames",
		append([]interface{}{ctx}, names...)...)}
}

func (_c *FileMetadataMock_FindByNames_Call) Run(run func(ctx context.Context, names ...string)) *FileMetadataMock_FindByNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *FileMetadataMock_FindByNames_Call) Return(_a0 []entity.FileMetadata, _a1 error) *FileMetadataMock_FindByNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileMetadataMock_FindByNames_Call) RunAndReturn(run func(context.Context, ...string) ([]entity.FileMetadata, error)) *FileMetadataMock_FindByNames_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, metadata
func (_m *FileMetadataMock) Patch(ctx context.Context, metadata *entity.PatchedFileMetadata) error {
	ret := _m.Called(ctx, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.PatchedFileMetadata) error); ok {
		r0 = rf(ctx, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileMetadataMock_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type FileMetadataMock_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - metadata *entity.PatchedFileMetadata
func (_e *FileMetadataMock_Expecter) Patch(ctx interface{}, metadata interface{}) *FileMetadataMock_Patch_Call {
	return &FileMetadataMock_Patch_Call{Call: _e.mock.On("Patch", ctx, metadata)}
}

func (_c *FileMetadataMock_Patch_Call) Run(run func(ctx context.Context, metadata *entity.PatchedFileMetadata)) *FileMetadataMock_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.PatchedFileMetadata))
	})
	return _c
}

func (_c *FileMetadataMock_Patch_Call) Return(_a0 error) *FileMetadataMock_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileMetadataMock_Patch_Call) RunAndReturn(run func(context.Context, *entity.PatchedFileMetadata) error) *FileMetadataMock_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileMetadataMock creates a new instance of FileMetadataMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileMetadataMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileMetadataMock {
	mock := &FileMetadataMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
