// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/file_storage/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	status "github.com/arcorium/nexa/shared/status"

	types "github.com/arcorium/nexa/shared/types"
)

// FileStorageMock is an autogenerated mock type for the IFileStorage type
type FileStorageMock struct {
	mock.Mock
}

type FileStorageMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FileStorageMock) EXPECT() *FileStorageMock_Expecter {
	return &FileStorageMock_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *FileStorageMock) Delete(ctx context.Context, id types.Id) status.Object {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) status.Object); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// FileStorageMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type FileStorageMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id types.Id
func (_e *FileStorageMock_Expecter) Delete(ctx interface{}, id interface{}) *FileStorageMock_Delete_Call {
	return &FileStorageMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *FileStorageMock_Delete_Call) Run(run func(ctx context.Context, id types.Id)) *FileStorageMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *FileStorageMock_Delete_Call) Return(_a0 status.Object) *FileStorageMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileStorageMock_Delete_Call) RunAndReturn(run func(context.Context, types.Id) status.Object) *FileStorageMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, id
func (_m *FileStorageMock) Find(ctx context.Context, id types.Id) (dto.FileResponseDTO, status.Object) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 dto.FileResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) (dto.FileResponseDTO, status.Object)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) dto.FileResponseDTO); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dto.FileResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Id) status.Object); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// FileStorageMock_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type FileStorageMock_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - id types.Id
func (_e *FileStorageMock_Expecter) Find(ctx interface{}, id interface{}) *FileStorageMock_Find_Call {
	return &FileStorageMock_Find_Call{Call: _e.mock.On("Find", ctx, id)}
}

func (_c *FileStorageMock_Find_Call) Run(run func(ctx context.Context, id types.Id)) *FileStorageMock_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *FileStorageMock_Find_Call) Return(_a0 dto.FileResponseDTO, _a1 status.Object) *FileStorageMock_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileStorageMock_Find_Call) RunAndReturn(run func(context.Context, types.Id) (dto.FileResponseDTO, status.Object)) *FileStorageMock_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindMetadata provides a mock function with given fields: ctx, id
func (_m *FileStorageMock) FindMetadata(ctx context.Context, id types.Id) (*dto.FileMetadataResponseDTO, status.Object) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindMetadata")
	}

	var r0 *dto.FileMetadataResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) (*dto.FileMetadataResponseDTO, status.Object)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) *dto.FileMetadataResponseDTO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.FileMetadataResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Id) status.Object); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// FileStorageMock_FindMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMetadata'
type FileStorageMock_FindMetadata_Call struct {
	*mock.Call
}

// FindMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - id types.Id
func (_e *FileStorageMock_Expecter) FindMetadata(ctx interface{}, id interface{}) *FileStorageMock_FindMetadata_Call {
	return &FileStorageMock_FindMetadata_Call{Call: _e.mock.On("FindMetadata", ctx, id)}
}

func (_c *FileStorageMock_FindMetadata_Call) Run(run func(ctx context.Context, id types.Id)) *FileStorageMock_FindMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *FileStorageMock_FindMetadata_Call) Return(_a0 *dto.FileMetadataResponseDTO, _a1 status.Object) *FileStorageMock_FindMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileStorageMock_FindMetadata_Call) RunAndReturn(run func(context.Context, types.Id) (*dto.FileMetadataResponseDTO, status.Object)) *FileStorageMock_FindMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function with given fields: ctx, input
func (_m *FileStorageMock) Move(ctx context.Context, input *dto.UpdateFileMetadataDTO) status.Object {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateFileMetadataDTO) status.Object); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// FileStorageMock_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type FileStorageMock_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - ctx context.Context
//   - input *dto.UpdateFileMetadataDTO
func (_e *FileStorageMock_Expecter) Move(ctx interface{}, input interface{}) *FileStorageMock_Move_Call {
	return &FileStorageMock_Move_Call{Call: _e.mock.On("Move", ctx, input)}
}

func (_c *FileStorageMock_Move_Call) Run(run func(ctx context.Context, input *dto.UpdateFileMetadataDTO)) *FileStorageMock_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.UpdateFileMetadataDTO))
	})
	return _c
}

func (_c *FileStorageMock_Move_Call) Return(_a0 status.Object) *FileStorageMock_Move_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileStorageMock_Move_Call) RunAndReturn(run func(context.Context, *dto.UpdateFileMetadataDTO) status.Object) *FileStorageMock_Move_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: ctx, file
func (_m *FileStorageMock) Store(ctx context.Context, file *dto.FileStoreDTO) (types.Id, status.Object) {
	ret := _m.Called(ctx, file)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 types.Id
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.FileStoreDTO) (types.Id, status.Object)); ok {
		return rf(ctx, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.FileStoreDTO) types.Id); ok {
		r0 = rf(ctx, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Id)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.FileStoreDTO) status.Object); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// FileStorageMock_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type FileStorageMock_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - file *dto.FileStoreDTO
func (_e *FileStorageMock_Expecter) Store(ctx interface{}, file interface{}) *FileStorageMock_Store_Call {
	return &FileStorageMock_Store_Call{Call: _e.mock.On("Store", ctx, file)}
}

func (_c *FileStorageMock_Store_Call) Run(run func(ctx context.Context, file *dto.FileStoreDTO)) *FileStorageMock_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.FileStoreDTO))
	})
	return _c
}

func (_c *FileStorageMock_Store_Call) Return(_a0 types.Id, _a1 status.Object) *FileStorageMock_Store_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileStorageMock_Store_Call) RunAndReturn(run func(context.Context, *dto.FileStoreDTO) (types.Id, status.Object)) *FileStorageMock_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileStorageMock creates a new instance of FileStorageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileStorageMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileStorageMock {
	mock := &FileStorageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
