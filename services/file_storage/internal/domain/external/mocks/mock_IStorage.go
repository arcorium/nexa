// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "nexa/services/file_storage/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	types "github.com/arcorium/nexa/shared/types"
)

// StorageMock is an autogenerated mock type for the IStorage type
type StorageMock struct {
	mock.Mock
}

type StorageMock_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageMock) EXPECT() *StorageMock_Expecter {
	return &StorageMock_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *StorageMock) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageMock_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type StorageMock_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *StorageMock_Expecter) Close(ctx interface{}) *StorageMock_Close_Call {
	return &StorageMock_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *StorageMock_Close_Call) Run(run func(ctx context.Context)) *StorageMock_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *StorageMock_Close_Call) Return(_a0 error) *StorageMock_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageMock_Close_Call) RunAndReturn(run func(context.Context) error) *StorageMock_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Copy provides a mock function with given fields: ctx, src, dest
func (_m *StorageMock) Copy(ctx context.Context, src string, dest string) (string, error) {
	ret := _m.Called(ctx, src, dest)

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, src, dest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, src, dest)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, src, dest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageMock_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type StorageMock_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
//   - ctx context.Context
//   - src string
//   - dest string
func (_e *StorageMock_Expecter) Copy(ctx interface{}, src interface{}, dest interface{}) *StorageMock_Copy_Call {
	return &StorageMock_Copy_Call{Call: _e.mock.On("Copy", ctx, src, dest)}
}

func (_c *StorageMock_Copy_Call) Run(run func(ctx context.Context, src string, dest string)) *StorageMock_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StorageMock_Copy_Call) Return(_a0 string, _a1 error) *StorageMock_Copy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageMock_Copy_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *StorageMock_Copy_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, filename
func (_m *StorageMock) Delete(ctx context.Context, filename string) error {
	ret := _m.Called(ctx, filename)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type StorageMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - filename string
func (_e *StorageMock_Expecter) Delete(ctx interface{}, filename interface{}) *StorageMock_Delete_Call {
	return &StorageMock_Delete_Call{Call: _e.mock.On("Delete", ctx, filename)}
}

func (_c *StorageMock_Delete_Call) Run(run func(ctx context.Context, filename string)) *StorageMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StorageMock_Delete_Call) Return(_a0 error) *StorageMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageMock_Delete_Call) RunAndReturn(run func(context.Context, string) error) *StorageMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, filename
func (_m *StorageMock) Find(ctx context.Context, filename string) (entity.File, error) {
	ret := _m.Called(ctx, filename)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 entity.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.File, error)); ok {
		return rf(ctx, filename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.File); ok {
		r0 = rf(ctx, filename)
	} else {
		r0 = ret.Get(0).(entity.File)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageMock_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type StorageMock_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filename string
func (_e *StorageMock_Expecter) Find(ctx interface{}, filename interface{}) *StorageMock_Find_Call {
	return &StorageMock_Find_Call{Call: _e.mock.On("Find", ctx, filename)}
}

func (_c *StorageMock_Find_Call) Run(run func(ctx context.Context, filename string)) *StorageMock_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StorageMock_Find_Call) Return(_a0 entity.File, _a1 error) *StorageMock_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageMock_Find_Call) RunAndReturn(run func(context.Context, string) (entity.File, error)) *StorageMock_Find_Call {
	_c.Call.Return(run)
	return _c
}

// GetFullPath provides a mock function with given fields: ctx, filename
func (_m *StorageMock) GetFullPath(ctx context.Context, filename string) (types.FilePath, error) {
	ret := _m.Called(ctx, filename)

	if len(ret) == 0 {
		panic("no return value specified for GetFullPath")
	}

	var r0 types.FilePath
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.FilePath, error)); ok {
		return rf(ctx, filename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.FilePath); ok {
		r0 = rf(ctx, filename)
	} else {
		r0 = ret.Get(0).(types.FilePath)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageMock_GetFullPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFullPath'
type StorageMock_GetFullPath_Call struct {
	*mock.Call
}

// GetFullPath is a helper method to define mock.On call
//   - ctx context.Context
//   - filename string
func (_e *StorageMock_Expecter) GetFullPath(ctx interface{}, filename interface{}) *StorageMock_GetFullPath_Call {
	return &StorageMock_GetFullPath_Call{Call: _e.mock.On("GetFullPath", ctx, filename)}
}

func (_c *StorageMock_GetFullPath_Call) Run(run func(ctx context.Context, filename string)) *StorageMock_GetFullPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StorageMock_GetFullPath_Call) Return(_a0 types.FilePath, _a1 error) *StorageMock_GetFullPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageMock_GetFullPath_Call) RunAndReturn(run func(context.Context, string) (types.FilePath, error)) *StorageMock_GetFullPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvider provides a mock function with given fields:
func (_m *StorageMock) GetProvider() entity.StorageProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProvider")
	}

	var r0 entity.StorageProvider
	if rf, ok := ret.Get(0).(func() entity.StorageProvider); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entity.StorageProvider)
	}

	return r0
}

// StorageMock_GetProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvider'
type StorageMock_GetProvider_Call struct {
	*mock.Call
}

// GetProvider is a helper method to define mock.On call
func (_e *StorageMock_Expecter) GetProvider() *StorageMock_GetProvider_Call {
	return &StorageMock_GetProvider_Call{Call: _e.mock.On("GetProvider")}
}

func (_c *StorageMock_GetProvider_Call) Run(run func()) *StorageMock_GetProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StorageMock_GetProvider_Call) Return(_a0 entity.StorageProvider) *StorageMock_GetProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageMock_GetProvider_Call) RunAndReturn(run func() entity.StorageProvider) *StorageMock_GetProvider_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: ctx, file
func (_m *StorageMock) Store(ctx context.Context, file *entity.File) (string, error) {
	ret := _m.Called(ctx, file)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.File) (string, error)); ok {
		return rf(ctx, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.File) string); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.File) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageMock_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type StorageMock_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - file *entity.File
func (_e *StorageMock_Expecter) Store(ctx interface{}, file interface{}) *StorageMock_Store_Call {
	return &StorageMock_Store_Call{Call: _e.mock.On("Store", ctx, file)}
}

func (_c *StorageMock_Store_Call) Run(run func(ctx context.Context, file *entity.File)) *StorageMock_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.File))
	})
	return _c
}

func (_c *StorageMock_Store_Call) Return(_a0 string, _a1 error) *StorageMock_Store_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageMock_Store_Call) RunAndReturn(run func(context.Context, *entity.File) (string, error)) *StorageMock_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorageMock creates a new instance of StorageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageMock {
	mock := &StorageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
