// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/mailer/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	shareddto "nexa/shared/dto"

	status "nexa/shared/status"

	types "nexa/shared/types"
)

// MailMock is an autogenerated mock type for the IMail type
type MailMock struct {
	mock.Mock
}

type MailMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MailMock) EXPECT() *MailMock_Expecter {
	return &MailMock_Expecter{mock: &_m.Mock}
}

// FindByIds provides a mock function with given fields: ctx, mailIds
func (_m *MailMock) FindByIds(ctx context.Context, mailIds ...types.Id) ([]dto.MailResponseDTO, status.Object) {
	_va := make([]interface{}, len(mailIds))
	for _i := range mailIds {
		_va[_i] = mailIds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindByIds")
	}

	var r0 []dto.MailResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) ([]dto.MailResponseDTO, status.Object)); ok {
		return rf(ctx, mailIds...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) []dto.MailResponseDTO); ok {
		r0 = rf(ctx, mailIds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.MailResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...types.Id) status.Object); ok {
		r1 = rf(ctx, mailIds...)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// MailMock_FindByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIds'
type MailMock_FindByIds_Call struct {
	*mock.Call
}

// FindByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - mailIds ...types.Id
func (_e *MailMock_Expecter) FindByIds(ctx interface{}, mailIds ...interface{}) *MailMock_FindByIds_Call {
	return &MailMock_FindByIds_Call{Call: _e.mock.On("FindByIds",
		append([]interface{}{ctx}, mailIds...)...)}
}

func (_c *MailMock_FindByIds_Call) Run(run func(ctx context.Context, mailIds ...types.Id)) *MailMock_FindByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Id, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Id)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MailMock_FindByIds_Call) Return(_a0 []dto.MailResponseDTO, _a1 status.Object) *MailMock_FindByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MailMock_FindByIds_Call) RunAndReturn(run func(context.Context, ...types.Id) ([]dto.MailResponseDTO, status.Object)) *MailMock_FindByIds_Call {
	_c.Call.Return(run)
	return _c
}

// FindByTag provides a mock function with given fields: ctx, tagId
func (_m *MailMock) FindByTag(ctx context.Context, tagId types.Id) ([]dto.MailResponseDTO, status.Object) {
	ret := _m.Called(ctx, tagId)

	if len(ret) == 0 {
		panic("no return value specified for FindByTag")
	}

	var r0 []dto.MailResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) ([]dto.MailResponseDTO, status.Object)); ok {
		return rf(ctx, tagId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) []dto.MailResponseDTO); ok {
		r0 = rf(ctx, tagId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.MailResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Id) status.Object); ok {
		r1 = rf(ctx, tagId)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// MailMock_FindByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByTag'
type MailMock_FindByTag_Call struct {
	*mock.Call
}

// FindByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - tagId types.Id
func (_e *MailMock_Expecter) FindByTag(ctx interface{}, tagId interface{}) *MailMock_FindByTag_Call {
	return &MailMock_FindByTag_Call{Call: _e.mock.On("FindByTag", ctx, tagId)}
}

func (_c *MailMock_FindByTag_Call) Run(run func(ctx context.Context, tagId types.Id)) *MailMock_FindByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *MailMock_FindByTag_Call) Return(_a0 []dto.MailResponseDTO, _a1 status.Object) *MailMock_FindByTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MailMock_FindByTag_Call) RunAndReturn(run func(context.Context, types.Id) ([]dto.MailResponseDTO, status.Object)) *MailMock_FindByTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, pagedDTO
func (_m *MailMock) GetAll(ctx context.Context, pagedDTO *shareddto.PagedElementDTO) (shareddto.PagedElementResult[dto.MailResponseDTO], status.Object) {
	ret := _m.Called(ctx, pagedDTO)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 shareddto.PagedElementResult[dto.MailResponseDTO]
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *shareddto.PagedElementDTO) (shareddto.PagedElementResult[dto.MailResponseDTO], status.Object)); ok {
		return rf(ctx, pagedDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shareddto.PagedElementDTO) shareddto.PagedElementResult[dto.MailResponseDTO]); ok {
		r0 = rf(ctx, pagedDTO)
	} else {
		r0 = ret.Get(0).(shareddto.PagedElementResult[dto.MailResponseDTO])
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shareddto.PagedElementDTO) status.Object); ok {
		r1 = rf(ctx, pagedDTO)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// MailMock_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MailMock_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - pagedDTO *shareddto.PagedElementDTO
func (_e *MailMock_Expecter) GetAll(ctx interface{}, pagedDTO interface{}) *MailMock_GetAll_Call {
	return &MailMock_GetAll_Call{Call: _e.mock.On("GetAll", ctx, pagedDTO)}
}

func (_c *MailMock_GetAll_Call) Run(run func(ctx context.Context, pagedDTO *shareddto.PagedElementDTO)) *MailMock_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*shareddto.PagedElementDTO))
	})
	return _c
}

func (_c *MailMock_GetAll_Call) Return(_a0 shareddto.PagedElementResult[dto.MailResponseDTO], _a1 status.Object) *MailMock_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MailMock_GetAll_Call) RunAndReturn(run func(context.Context, *shareddto.PagedElementDTO) (shareddto.PagedElementResult[dto.MailResponseDTO], status.Object)) *MailMock_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// HasWork provides a mock function with given fields:
func (_m *MailMock) HasWork() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasWork")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MailMock_HasWork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasWork'
type MailMock_HasWork_Call struct {
	*mock.Call
}

// HasWork is a helper method to define mock.On call
func (_e *MailMock_Expecter) HasWork() *MailMock_HasWork_Call {
	return &MailMock_HasWork_Call{Call: _e.mock.On("HasWork")}
}

func (_c *MailMock_HasWork_Call) Run(run func()) *MailMock_HasWork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MailMock_HasWork_Call) Return(_a0 bool) *MailMock_HasWork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MailMock_HasWork_Call) RunAndReturn(run func() bool) *MailMock_HasWork_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, mailId
func (_m *MailMock) Remove(ctx context.Context, mailId types.Id) status.Object {
	ret := _m.Called(ctx, mailId)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) status.Object); ok {
		r0 = rf(ctx, mailId)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// MailMock_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MailMock_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - mailId types.Id
func (_e *MailMock_Expecter) Remove(ctx interface{}, mailId interface{}) *MailMock_Remove_Call {
	return &MailMock_Remove_Call{Call: _e.mock.On("Remove", ctx, mailId)}
}

func (_c *MailMock_Remove_Call) Run(run func(ctx context.Context, mailId types.Id)) *MailMock_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *MailMock_Remove_Call) Return(_a0 status.Object) *MailMock_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MailMock_Remove_Call) RunAndReturn(run func(context.Context, types.Id) status.Object) *MailMock_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: ctx, mailDTO
func (_m *MailMock) Send(ctx context.Context, mailDTO *dto.SendMailDTO) ([]types.Id, status.Object) {
	ret := _m.Called(ctx, mailDTO)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 []types.Id
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SendMailDTO) ([]types.Id, status.Object)); ok {
		return rf(ctx, mailDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SendMailDTO) []types.Id); ok {
		r0 = rf(ctx, mailDTO)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Id)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.SendMailDTO) status.Object); ok {
		r1 = rf(ctx, mailDTO)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// MailMock_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MailMock_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - mailDTO *dto.SendMailDTO
func (_e *MailMock_Expecter) Send(ctx interface{}, mailDTO interface{}) *MailMock_Send_Call {
	return &MailMock_Send_Call{Call: _e.mock.On("Send", ctx, mailDTO)}
}

func (_c *MailMock_Send_Call) Run(run func(ctx context.Context, mailDTO *dto.SendMailDTO)) *MailMock_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.SendMailDTO))
	})
	return _c
}

func (_c *MailMock_Send_Call) Return(_a0 []types.Id, _a1 status.Object) *MailMock_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MailMock_Send_Call) RunAndReturn(run func(context.Context, *dto.SendMailDTO) ([]types.Id, status.Object)) *MailMock_Send_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, mailDTO
func (_m *MailMock) Update(ctx context.Context, mailDTO *dto.UpdateMailDTO) status.Object {
	ret := _m.Called(ctx, mailDTO)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateMailDTO) status.Object); ok {
		r0 = rf(ctx, mailDTO)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// MailMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MailMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - mailDTO *dto.UpdateMailDTO
func (_e *MailMock_Expecter) Update(ctx interface{}, mailDTO interface{}) *MailMock_Update_Call {
	return &MailMock_Update_Call{Call: _e.mock.On("Update", ctx, mailDTO)}
}

func (_c *MailMock_Update_Call) Run(run func(ctx context.Context, mailDTO *dto.UpdateMailDTO)) *MailMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.UpdateMailDTO))
	})
	return _c
}

func (_c *MailMock_Update_Call) Return(_a0 status.Object) *MailMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MailMock_Update_Call) RunAndReturn(run func(context.Context, *dto.UpdateMailDTO) status.Object) *MailMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMailMock creates a new instance of MailMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MailMock {
	mock := &MailMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
