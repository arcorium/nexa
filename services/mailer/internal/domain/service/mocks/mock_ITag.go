// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/mailer/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	shareddto "github.com/arcorium/nexa/shared/dto"

	status "github.com/arcorium/nexa/shared/status"

	types "github.com/arcorium/nexa/shared/types"
)

// TagMock is an autogenerated mock type for the ITag type
type TagMock struct {
	mock.Mock
}

type TagMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TagMock) EXPECT() *TagMock_Expecter {
	return &TagMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *TagMock) Create(ctx context.Context, _a1 *dto.CreateTagDTO) (types.Id, status.Object) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 types.Id
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateTagDTO) (types.Id, status.Object)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateTagDTO) types.Id); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Id)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateTagDTO) status.Object); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// TagMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TagMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *dto.CreateTagDTO
func (_e *TagMock_Expecter) Create(ctx interface{}, _a1 interface{}) *TagMock_Create_Call {
	return &TagMock_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *TagMock_Create_Call) Run(run func(ctx context.Context, _a1 *dto.CreateTagDTO)) *TagMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.CreateTagDTO))
	})
	return _c
}

func (_c *TagMock_Create_Call) Return(_a0 types.Id, _a1 status.Object) *TagMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TagMock_Create_Call) RunAndReturn(run func(context.Context, *dto.CreateTagDTO) (types.Id, status.Object)) *TagMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIds provides a mock function with given fields: ctx, ids
func (_m *TagMock) FindByIds(ctx context.Context, ids ...types.Id) ([]dto.TagResponseDTO, status.Object) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindByIds")
	}

	var r0 []dto.TagResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) ([]dto.TagResponseDTO, status.Object)); ok {
		return rf(ctx, ids...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) []dto.TagResponseDTO); ok {
		r0 = rf(ctx, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TagResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...types.Id) status.Object); ok {
		r1 = rf(ctx, ids...)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// TagMock_FindByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIds'
type TagMock_FindByIds_Call struct {
	*mock.Call
}

// FindByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...types.Id
func (_e *TagMock_Expecter) FindByIds(ctx interface{}, ids ...interface{}) *TagMock_FindByIds_Call {
	return &TagMock_FindByIds_Call{Call: _e.mock.On("FindByIds",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *TagMock_FindByIds_Call) Run(run func(ctx context.Context, ids ...types.Id)) *TagMock_FindByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Id, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Id)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *TagMock_FindByIds_Call) Return(_a0 []dto.TagResponseDTO, _a1 status.Object) *TagMock_FindByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TagMock_FindByIds_Call) RunAndReturn(run func(context.Context, ...types.Id) ([]dto.TagResponseDTO, status.Object)) *TagMock_FindByIds_Call {
	_c.Call.Return(run)
	return _c
}

// FindByName provides a mock function with given fields: ctx, name
func (_m *TagMock) FindByName(ctx context.Context, name string) (dto.TagResponseDTO, status.Object) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 dto.TagResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, string) (dto.TagResponseDTO, status.Object)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) dto.TagResponseDTO); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(dto.TagResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) status.Object); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// TagMock_FindByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByName'
type TagMock_FindByName_Call struct {
	*mock.Call
}

// FindByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *TagMock_Expecter) FindByName(ctx interface{}, name interface{}) *TagMock_FindByName_Call {
	return &TagMock_FindByName_Call{Call: _e.mock.On("FindByName", ctx, name)}
}

func (_c *TagMock_FindByName_Call) Run(run func(ctx context.Context, name string)) *TagMock_FindByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TagMock_FindByName_Call) Return(_a0 dto.TagResponseDTO, _a1 status.Object) *TagMock_FindByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TagMock_FindByName_Call) RunAndReturn(run func(context.Context, string) (dto.TagResponseDTO, status.Object)) *TagMock_FindByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, _a1
func (_m *TagMock) GetAll(ctx context.Context, _a1 *shareddto.PagedElementDTO) (shareddto.PagedElementResult[dto.TagResponseDTO], status.Object) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 shareddto.PagedElementResult[dto.TagResponseDTO]
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *shareddto.PagedElementDTO) (shareddto.PagedElementResult[dto.TagResponseDTO], status.Object)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shareddto.PagedElementDTO) shareddto.PagedElementResult[dto.TagResponseDTO]); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(shareddto.PagedElementResult[dto.TagResponseDTO])
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shareddto.PagedElementDTO) status.Object); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// TagMock_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type TagMock_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *shareddto.PagedElementDTO
func (_e *TagMock_Expecter) GetAll(ctx interface{}, _a1 interface{}) *TagMock_GetAll_Call {
	return &TagMock_GetAll_Call{Call: _e.mock.On("GetAll", ctx, _a1)}
}

func (_c *TagMock_GetAll_Call) Run(run func(ctx context.Context, _a1 *shareddto.PagedElementDTO)) *TagMock_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*shareddto.PagedElementDTO))
	})
	return _c
}

func (_c *TagMock_GetAll_Call) Return(_a0 shareddto.PagedElementResult[dto.TagResponseDTO], _a1 status.Object) *TagMock_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TagMock_GetAll_Call) RunAndReturn(run func(context.Context, *shareddto.PagedElementDTO) (shareddto.PagedElementResult[dto.TagResponseDTO], status.Object)) *TagMock_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, id
func (_m *TagMock) Remove(ctx context.Context, id types.Id) status.Object {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) status.Object); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// TagMock_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type TagMock_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - id types.Id
func (_e *TagMock_Expecter) Remove(ctx interface{}, id interface{}) *TagMock_Remove_Call {
	return &TagMock_Remove_Call{Call: _e.mock.On("Remove", ctx, id)}
}

func (_c *TagMock_Remove_Call) Run(run func(ctx context.Context, id types.Id)) *TagMock_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *TagMock_Remove_Call) Return(_a0 status.Object) *TagMock_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TagMock_Remove_Call) RunAndReturn(run func(context.Context, types.Id) status.Object) *TagMock_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *TagMock) Update(ctx context.Context, _a1 *dto.UpdateTagDTO) status.Object {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateTagDTO) status.Object); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// TagMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TagMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *dto.UpdateTagDTO
func (_e *TagMock_Expecter) Update(ctx interface{}, _a1 interface{}) *TagMock_Update_Call {
	return &TagMock_Update_Call{Call: _e.mock.On("Update", ctx, _a1)}
}

func (_c *TagMock_Update_Call) Run(run func(ctx context.Context, _a1 *dto.UpdateTagDTO)) *TagMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.UpdateTagDTO))
	})
	return _c
}

func (_c *TagMock_Update_Call) Return(_a0 status.Object) *TagMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TagMock_Update_Call) RunAndReturn(run func(context.Context, *dto.UpdateTagDTO) status.Object) *TagMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewTagMock creates a new instance of TagMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTagMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TagMock {
	mock := &TagMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
