// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/mailer/internal/domain/dto"
	entity "nexa/services/mailer/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// MailMock is an autogenerated mock type for the IMail type
type MailMock struct {
	mock.Mock
}

type MailMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MailMock) EXPECT() *MailMock_Expecter {
	return &MailMock_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: _a0
func (_m *MailMock) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MailMock_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MailMock_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MailMock_Expecter) Close(_a0 interface{}) *MailMock_Close_Call {
	return &MailMock_Close_Call{Call: _e.mock.On("Close", _a0)}
}

func (_c *MailMock_Close_Call) Run(run func(_a0 context.Context)) *MailMock_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MailMock_Close_Call) Return(_a0 error) *MailMock_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MailMock_Close_Call) RunAndReturn(run func(context.Context) error) *MailMock_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: ctx, mail, attachments
func (_m *MailMock) Send(ctx context.Context, mail *entity.Mail, attachments []dto.FileAttachment) error {
	ret := _m.Called(ctx, mail, attachments)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Mail, []dto.FileAttachment) error); ok {
		r0 = rf(ctx, mail, attachments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MailMock_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MailMock_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - mail *entity.Mail
//   - attachments []dto.FileAttachment
func (_e *MailMock_Expecter) Send(ctx interface{}, mail interface{}, attachments interface{}) *MailMock_Send_Call {
	return &MailMock_Send_Call{Call: _e.mock.On("Send", ctx, mail, attachments)}
}

func (_c *MailMock_Send_Call) Run(run func(ctx context.Context, mail *entity.Mail, attachments []dto.FileAttachment)) *MailMock_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Mail), args[2].([]dto.FileAttachment))
	})
	return _c
}

func (_c *MailMock_Send_Call) Return(_a0 error) *MailMock_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MailMock_Send_Call) RunAndReturn(run func(context.Context, *entity.Mail, []dto.FileAttachment) error) *MailMock_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMailMock creates a new instance of MailMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MailMock {
	mock := &MailMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
