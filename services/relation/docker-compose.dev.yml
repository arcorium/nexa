include:
  - ../authorization/docker-compose.yml

services:
  relation-db:
    image: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U nexa -d nexa-relation" ]
      interval: 5s
      retries: 10
    environment:
      - POSTGRES_DB=nexa-relation
      - POSTGRES_USER=nexa
      - POSTGRES_PASSWORD=nexa
    networks:
      - nr_network
  nexa-relation-migrate:
    build:
      dockerfile: ./docker/migrate.Dockerfile
    restart: on-failure
    depends_on:
      relation-db:
        condition: service_healthy
    environment:
      - PG_ADDRESS=relation-db
      - PG_USERNAME=nexa
      - PG_PASSWORD=nexa
      - PG_DB_NAME=nexa-relation
      - PG_IS_SECURE=false
    networks:
      - nr_network
  jaeger:
    image: jaegertracing/all-in-one:1.58
    ports:
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 4317:4317
      - 4318:4318
      - 14250:14250
      - 14268:14268
      - 14269:14269
      - 9411:9411
    networks:
      - nr_network
  token_generator:
    build:
      context: ../../token_generator/
      dockerfile: Dockerfile
    entrypoint: /bin/sh -c "./main > /output/token.txt"
    volumes:
      - relation-token_output:/output
  nexa-relation-seed:
    build:
      dockerfile: ./docker/seed.Dockerfile
    restart: on-failure
    depends_on:
      nexa-relation-migrate:
        condition: service_completed_successfully
      token_generator:
        condition: service_completed_successfully
      nexa-authz:
        condition: service_healthy
    environment:
      - PG_ADDRESS=relation-db
      - PG_USERNAME=nexa
      - PG_PASSWORD=nexa
      - PG_DB_NAME=nexa-relation
      - PG_IS_SECURE=false
      - AUTHZ_SERVICE_ADDR=nexa-authz:8080
    networks:
      - nr_network
    volumes:
      - relation-token_output:/output

networks:
  nr_network:
    driver: bridge

volumes:
  relation-token_output: