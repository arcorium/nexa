// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/authentication/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	types "nexa/shared/types"
)

// RoleClientMock is an autogenerated mock type for the IRoleClient type
type RoleClientMock struct {
	mock.Mock
}

type RoleClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RoleClientMock) EXPECT() *RoleClientMock_Expecter {
	return &RoleClientMock_Expecter{mock: &_m.Mock}
}

// GetUserRoles provides a mock function with given fields: ctx, userId
func (_m *RoleClientMock) GetUserRoles(ctx context.Context, userId types.Id) ([]dto.RoleResponseDTO, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []dto.RoleResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) ([]dto.RoleResponseDTO, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) []dto.RoleResponseDTO); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.RoleResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Id) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleClientMock_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type RoleClientMock_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.Id
func (_e *RoleClientMock_Expecter) GetUserRoles(ctx interface{}, userId interface{}) *RoleClientMock_GetUserRoles_Call {
	return &RoleClientMock_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx, userId)}
}

func (_c *RoleClientMock_GetUserRoles_Call) Run(run func(ctx context.Context, userId types.Id)) *RoleClientMock_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *RoleClientMock_GetUserRoles_Call) Return(_a0 []dto.RoleResponseDTO, _a1 error) *RoleClientMock_GetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleClientMock_GetUserRoles_Call) RunAndReturn(run func(context.Context, types.Id) ([]dto.RoleResponseDTO, error)) *RoleClientMock_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoleClientMock creates a new instance of RoleClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoleClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoleClientMock {
	mock := &RoleClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
