// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/authentication/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	types "github.com/arcorium/nexa/shared/types"
)

// TokenClientMock is an autogenerated mock type for the ITokenClient type
type TokenClientMock struct {
	mock.Mock
}

type TokenClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenClientMock) EXPECT() *TokenClientMock_Expecter {
	return &TokenClientMock_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: ctx, _a1
func (_m *TokenClientMock) Generate(ctx context.Context, _a1 *dto.TokenGenerationDTO) (dto.TokenResponseDTO, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 dto.TokenResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.TokenGenerationDTO) (dto.TokenResponseDTO, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.TokenGenerationDTO) dto.TokenResponseDTO); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(dto.TokenResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.TokenGenerationDTO) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenClientMock_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type TokenClientMock_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *dto.TokenGenerationDTO
func (_e *TokenClientMock_Expecter) Generate(ctx interface{}, _a1 interface{}) *TokenClientMock_Generate_Call {
	return &TokenClientMock_Generate_Call{Call: _e.mock.On("Generate", ctx, _a1)}
}

func (_c *TokenClientMock_Generate_Call) Run(run func(ctx context.Context, _a1 *dto.TokenGenerationDTO)) *TokenClientMock_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.TokenGenerationDTO))
	})
	return _c
}

func (_c *TokenClientMock_Generate_Call) Return(_a0 dto.TokenResponseDTO, _a1 error) *TokenClientMock_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenClientMock_Generate_Call) RunAndReturn(run func(context.Context, *dto.TokenGenerationDTO) (dto.TokenResponseDTO, error)) *TokenClientMock_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: ctx, verificationDTO
func (_m *TokenClientMock) Verify(ctx context.Context, verificationDTO *dto.TokenVerificationDTO) (types.Id, error) {
	ret := _m.Called(ctx, verificationDTO)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 types.Id
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.TokenVerificationDTO) (types.Id, error)); ok {
		return rf(ctx, verificationDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.TokenVerificationDTO) types.Id); ok {
		r0 = rf(ctx, verificationDTO)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Id)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.TokenVerificationDTO) error); ok {
		r1 = rf(ctx, verificationDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenClientMock_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type TokenClientMock_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - verificationDTO *dto.TokenVerificationDTO
func (_e *TokenClientMock_Expecter) Verify(ctx interface{}, verificationDTO interface{}) *TokenClientMock_Verify_Call {
	return &TokenClientMock_Verify_Call{Call: _e.mock.On("Verify", ctx, verificationDTO)}
}

func (_c *TokenClientMock_Verify_Call) Run(run func(ctx context.Context, verificationDTO *dto.TokenVerificationDTO)) *TokenClientMock_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.TokenVerificationDTO))
	})
	return _c
}

func (_c *TokenClientMock_Verify_Call) Return(_a0 types.Id, _a1 error) *TokenClientMock_Verify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenClientMock_Verify_Call) RunAndReturn(run func(context.Context, *dto.TokenVerificationDTO) (types.Id, error)) *TokenClientMock_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenClientMock creates a new instance of TokenClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenClientMock {
	mock := &TokenClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
