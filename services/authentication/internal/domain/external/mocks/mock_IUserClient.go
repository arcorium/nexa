// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/authentication/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	types "github.com/arcorium/nexa/shared/types"
)

// UserClientMock is an autogenerated mock type for the IUserClient type
type UserClientMock struct {
	mock.Mock
}

type UserClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UserClientMock) EXPECT() *UserClientMock_Expecter {
	return &UserClientMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *UserClientMock) Create(ctx context.Context, request *dto.RegisterDTO) (types.Id, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 types.Id
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RegisterDTO) (types.Id, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RegisterDTO) types.Id); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Id)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.RegisterDTO) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserClientMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserClientMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request *dto.RegisterDTO
func (_e *UserClientMock_Expecter) Create(ctx interface{}, request interface{}) *UserClientMock_Create_Call {
	return &UserClientMock_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *UserClientMock_Create_Call) Run(run func(ctx context.Context, request *dto.RegisterDTO)) *UserClientMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.RegisterDTO))
	})
	return _c
}

func (_c *UserClientMock_Create_Call) Return(_a0 types.Id, _a1 error) *UserClientMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserClientMock_Create_Call) RunAndReturn(run func(context.Context, *dto.RegisterDTO) (types.Id, error)) *UserClientMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: ctx, email, password
func (_m *UserClientMock) Validate(ctx context.Context, email types.Email, password types.Password) (dto.UserResponseDTO, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 dto.UserResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Email, types.Password) (dto.UserResponseDTO, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Email, types.Password) dto.UserResponseDTO); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(dto.UserResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Email, types.Password) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserClientMock_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type UserClientMock_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - email types.Email
//   - password types.Password
func (_e *UserClientMock_Expecter) Validate(ctx interface{}, email interface{}, password interface{}) *UserClientMock_Validate_Call {
	return &UserClientMock_Validate_Call{Call: _e.mock.On("Validate", ctx, email, password)}
}

func (_c *UserClientMock_Validate_Call) Run(run func(ctx context.Context, email types.Email, password types.Password)) *UserClientMock_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Email), args[2].(types.Password))
	})
	return _c
}

func (_c *UserClientMock_Validate_Call) Return(_a0 dto.UserResponseDTO, _a1 error) *UserClientMock_Validate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserClientMock_Validate_Call) RunAndReturn(run func(context.Context, types.Email, types.Password) (dto.UserResponseDTO, error)) *UserClientMock_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserClientMock creates a new instance of UserClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserClientMock {
	mock := &UserClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
