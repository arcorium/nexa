// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/authentication/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// MailClientMock is an autogenerated mock type for the IMailClient type
type MailClientMock struct {
	mock.Mock
}

type MailClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MailClientMock) EXPECT() *MailClientMock_Expecter {
	return &MailClientMock_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: ctx, _a1
func (_m *MailClientMock) Send(ctx context.Context, _a1 *dto.SendVerificationEmailDTO) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SendVerificationEmailDTO) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MailClientMock_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MailClientMock_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *dto.SendVerificationEmailDTO
func (_e *MailClientMock_Expecter) Send(ctx interface{}, _a1 interface{}) *MailClientMock_Send_Call {
	return &MailClientMock_Send_Call{Call: _e.mock.On("Send", ctx, _a1)}
}

func (_c *MailClientMock_Send_Call) Run(run func(ctx context.Context, _a1 *dto.SendVerificationEmailDTO)) *MailClientMock_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.SendVerificationEmailDTO))
	})
	return _c
}

func (_c *MailClientMock_Send_Call) Return(_a0 error) *MailClientMock_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MailClientMock_Send_Call) RunAndReturn(run func(context.Context, *dto.SendVerificationEmailDTO) error) *MailClientMock_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMailClientMock creates a new instance of MailClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MailClientMock {
	mock := &MailClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
