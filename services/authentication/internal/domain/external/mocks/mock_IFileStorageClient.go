// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/authentication/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	types "github.com/arcorium/nexa/shared/types"
)

// FileStorageClientMock is an autogenerated mock type for the IFileStorageClient type
type FileStorageClientMock struct {
	mock.Mock
}

type FileStorageClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FileStorageClientMock) EXPECT() *FileStorageClientMock_Expecter {
	return &FileStorageClientMock_Expecter{mock: &_m.Mock}
}

// DeleteProfileImage provides a mock function with given fields: ctx, id
func (_m *FileStorageClientMock) DeleteProfileImage(ctx context.Context, id types.Id) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfileImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileStorageClientMock_DeleteProfileImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProfileImage'
type FileStorageClientMock_DeleteProfileImage_Call struct {
	*mock.Call
}

// DeleteProfileImage is a helper method to define mock.On call
//   - ctx context.Context
//   - id types.Id
func (_e *FileStorageClientMock_Expecter) DeleteProfileImage(ctx interface{}, id interface{}) *FileStorageClientMock_DeleteProfileImage_Call {
	return &FileStorageClientMock_DeleteProfileImage_Call{Call: _e.mock.On("DeleteProfileImage", ctx, id)}
}

func (_c *FileStorageClientMock_DeleteProfileImage_Call) Run(run func(ctx context.Context, id types.Id)) *FileStorageClientMock_DeleteProfileImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *FileStorageClientMock_DeleteProfileImage_Call) Return(_a0 error) *FileStorageClientMock_DeleteProfileImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileStorageClientMock_DeleteProfileImage_Call) RunAndReturn(run func(context.Context, types.Id) error) *FileStorageClientMock_DeleteProfileImage_Call {
	_c.Call.Return(run)
	return _c
}

// UploadProfileImage provides a mock function with given fields: ctx, _a1
func (_m *FileStorageClientMock) UploadProfileImage(ctx context.Context, _a1 *dto.UploadImageDTO) (types.Id, types.FilePath, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UploadProfileImage")
	}

	var r0 types.Id
	var r1 types.FilePath
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UploadImageDTO) (types.Id, types.FilePath, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UploadImageDTO) types.Id); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Id)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UploadImageDTO) types.FilePath); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Get(1).(types.FilePath)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.UploadImageDTO) error); ok {
		r2 = rf(ctx, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FileStorageClientMock_UploadProfileImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadProfileImage'
type FileStorageClientMock_UploadProfileImage_Call struct {
	*mock.Call
}

// UploadProfileImage is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *dto.UploadImageDTO
func (_e *FileStorageClientMock_Expecter) UploadProfileImage(ctx interface{}, _a1 interface{}) *FileStorageClientMock_UploadProfileImage_Call {
	return &FileStorageClientMock_UploadProfileImage_Call{Call: _e.mock.On("UploadProfileImage", ctx, _a1)}
}

func (_c *FileStorageClientMock_UploadProfileImage_Call) Run(run func(ctx context.Context, _a1 *dto.UploadImageDTO)) *FileStorageClientMock_UploadProfileImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.UploadImageDTO))
	})
	return _c
}

func (_c *FileStorageClientMock_UploadProfileImage_Call) Return(_a0 types.Id, _a1 types.FilePath, _a2 error) *FileStorageClientMock_UploadProfileImage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FileStorageClientMock_UploadProfileImage_Call) RunAndReturn(run func(context.Context, *dto.UploadImageDTO) (types.Id, types.FilePath, error)) *FileStorageClientMock_UploadProfileImage_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileStorageClientMock creates a new instance of FileStorageClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileStorageClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileStorageClientMock {
	mock := &FileStorageClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
