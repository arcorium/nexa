// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/authentication/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	status "github.com/arcorium/nexa/shared/status"

	types "github.com/arcorium/nexa/shared/types"
)

// ProfileMock is an autogenerated mock type for the IProfile type
type ProfileMock struct {
	mock.Mock
}

type ProfileMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ProfileMock) EXPECT() *ProfileMock_Expecter {
	return &ProfileMock_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: ctx, userIds
func (_m *ProfileMock) Find(ctx context.Context, userIds ...types.Id) ([]dto.ProfileResponseDTO, status.Object) {
	_va := make([]interface{}, len(userIds))
	for _i := range userIds {
		_va[_i] = userIds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []dto.ProfileResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) ([]dto.ProfileResponseDTO, status.Object)); ok {
		return rf(ctx, userIds...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Id) []dto.ProfileResponseDTO); ok {
		r0 = rf(ctx, userIds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ProfileResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...types.Id) status.Object); ok {
		r1 = rf(ctx, userIds...)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// ProfileMock_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type ProfileMock_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - userIds ...types.Id
func (_e *ProfileMock_Expecter) Find(ctx interface{}, userIds ...interface{}) *ProfileMock_Find_Call {
	return &ProfileMock_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{ctx}, userIds...)...)}
}

func (_c *ProfileMock_Find_Call) Run(run func(ctx context.Context, userIds ...types.Id)) *ProfileMock_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Id, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Id)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *ProfileMock_Find_Call) Return(_a0 []dto.ProfileResponseDTO, _a1 status.Object) *ProfileMock_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileMock_Find_Call) RunAndReturn(run func(context.Context, ...types.Id) ([]dto.ProfileResponseDTO, status.Object)) *ProfileMock_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, input
func (_m *ProfileMock) Update(ctx context.Context, input *dto.ProfileUpdateDTO) status.Object {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProfileUpdateDTO) status.Object); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// ProfileMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ProfileMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - input *dto.ProfileUpdateDTO
func (_e *ProfileMock_Expecter) Update(ctx interface{}, input interface{}) *ProfileMock_Update_Call {
	return &ProfileMock_Update_Call{Call: _e.mock.On("Update", ctx, input)}
}

func (_c *ProfileMock_Update_Call) Run(run func(ctx context.Context, input *dto.ProfileUpdateDTO)) *ProfileMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.ProfileUpdateDTO))
	})
	return _c
}

func (_c *ProfileMock_Update_Call) Return(_a0 status.Object) *ProfileMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProfileMock_Update_Call) RunAndReturn(run func(context.Context, *dto.ProfileUpdateDTO) status.Object) *ProfileMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAvatar provides a mock function with given fields: ctx, input
func (_m *ProfileMock) UpdateAvatar(ctx context.Context, input *dto.ProfileAvatarUpdateDTO) status.Object {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvatar")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ProfileAvatarUpdateDTO) status.Object); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// ProfileMock_UpdateAvatar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAvatar'
type ProfileMock_UpdateAvatar_Call struct {
	*mock.Call
}

// UpdateAvatar is a helper method to define mock.On call
//   - ctx context.Context
//   - input *dto.ProfileAvatarUpdateDTO
func (_e *ProfileMock_Expecter) UpdateAvatar(ctx interface{}, input interface{}) *ProfileMock_UpdateAvatar_Call {
	return &ProfileMock_UpdateAvatar_Call{Call: _e.mock.On("UpdateAvatar", ctx, input)}
}

func (_c *ProfileMock_UpdateAvatar_Call) Run(run func(ctx context.Context, input *dto.ProfileAvatarUpdateDTO)) *ProfileMock_UpdateAvatar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.ProfileAvatarUpdateDTO))
	})
	return _c
}

func (_c *ProfileMock_UpdateAvatar_Call) Return(_a0 status.Object) *ProfileMock_UpdateAvatar_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProfileMock_UpdateAvatar_Call) RunAndReturn(run func(context.Context, *dto.ProfileAvatarUpdateDTO) status.Object) *ProfileMock_UpdateAvatar_Call {
	_c.Call.Return(run)
	return _c
}

// NewProfileMock creates a new instance of ProfileMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileMock {
	mock := &ProfileMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
