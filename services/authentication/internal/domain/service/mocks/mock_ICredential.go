// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "nexa/services/authentication/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	status "nexa/shared/status"

	types "nexa/shared/types"
)

// CredentialMock is an autogenerated mock type for the ICredential type
type CredentialMock struct {
	mock.Mock
}

type CredentialMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CredentialMock) EXPECT() *CredentialMock_Expecter {
	return &CredentialMock_Expecter{mock: &_m.Mock}
}

// GetCredentials provides a mock function with given fields: ctx, userId
func (_m *CredentialMock) GetCredentials(ctx context.Context, userId types.Id) ([]dto.CredentialResponseDTO, status.Object) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentials")
	}

	var r0 []dto.CredentialResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) ([]dto.CredentialResponseDTO, status.Object)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) []dto.CredentialResponseDTO); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.CredentialResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Id) status.Object); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// CredentialMock_GetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentials'
type CredentialMock_GetCredentials_Call struct {
	*mock.Call
}

// GetCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.Id
func (_e *CredentialMock_Expecter) GetCredentials(ctx interface{}, userId interface{}) *CredentialMock_GetCredentials_Call {
	return &CredentialMock_GetCredentials_Call{Call: _e.mock.On("GetCredentials", ctx, userId)}
}

func (_c *CredentialMock_GetCredentials_Call) Run(run func(ctx context.Context, userId types.Id)) *CredentialMock_GetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *CredentialMock_GetCredentials_Call) Return(_a0 []dto.CredentialResponseDTO, _a1 status.Object) *CredentialMock_GetCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialMock_GetCredentials_Call) RunAndReturn(run func(context.Context, types.Id) ([]dto.CredentialResponseDTO, status.Object)) *CredentialMock_GetCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, _a1
func (_m *CredentialMock) Login(ctx context.Context, _a1 *dto.LoginDTO) (dto.LoginResponseDTO, status.Object) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 dto.LoginResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.LoginDTO) (dto.LoginResponseDTO, status.Object)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.LoginDTO) dto.LoginResponseDTO); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(dto.LoginResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.LoginDTO) status.Object); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// CredentialMock_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type CredentialMock_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *dto.LoginDTO
func (_e *CredentialMock_Expecter) Login(ctx interface{}, _a1 interface{}) *CredentialMock_Login_Call {
	return &CredentialMock_Login_Call{Call: _e.mock.On("Login", ctx, _a1)}
}

func (_c *CredentialMock_Login_Call) Run(run func(ctx context.Context, _a1 *dto.LoginDTO)) *CredentialMock_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.LoginDTO))
	})
	return _c
}

func (_c *CredentialMock_Login_Call) Return(_a0 dto.LoginResponseDTO, _a1 status.Object) *CredentialMock_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialMock_Login_Call) RunAndReturn(run func(context.Context, *dto.LoginDTO) (dto.LoginResponseDTO, status.Object)) *CredentialMock_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, logoutDTO
func (_m *CredentialMock) Logout(ctx context.Context, logoutDTO *dto.LogoutDTO) status.Object {
	ret := _m.Called(ctx, logoutDTO)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.LogoutDTO) status.Object); ok {
		r0 = rf(ctx, logoutDTO)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// CredentialMock_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type CredentialMock_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - logoutDTO *dto.LogoutDTO
func (_e *CredentialMock_Expecter) Logout(ctx interface{}, logoutDTO interface{}) *CredentialMock_Logout_Call {
	return &CredentialMock_Logout_Call{Call: _e.mock.On("Logout", ctx, logoutDTO)}
}

func (_c *CredentialMock_Logout_Call) Run(run func(ctx context.Context, logoutDTO *dto.LogoutDTO)) *CredentialMock_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.LogoutDTO))
	})
	return _c
}

func (_c *CredentialMock_Logout_Call) Return(_a0 status.Object) *CredentialMock_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CredentialMock_Logout_Call) RunAndReturn(run func(context.Context, *dto.LogoutDTO) status.Object) *CredentialMock_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// LogoutAll provides a mock function with given fields: ctx, userId
func (_m *CredentialMock) LogoutAll(ctx context.Context, userId types.Id) status.Object {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for LogoutAll")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) status.Object); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// CredentialMock_LogoutAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogoutAll'
type CredentialMock_LogoutAll_Call struct {
	*mock.Call
}

// LogoutAll is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.Id
func (_e *CredentialMock_Expecter) LogoutAll(ctx interface{}, userId interface{}) *CredentialMock_LogoutAll_Call {
	return &CredentialMock_LogoutAll_Call{Call: _e.mock.On("LogoutAll", ctx, userId)}
}

func (_c *CredentialMock_LogoutAll_Call) Run(run func(ctx context.Context, userId types.Id)) *CredentialMock_LogoutAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *CredentialMock_LogoutAll_Call) Return(_a0 status.Object) *CredentialMock_LogoutAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CredentialMock_LogoutAll_Call) RunAndReturn(run func(context.Context, types.Id) status.Object) *CredentialMock_LogoutAll_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, _a1
func (_m *CredentialMock) RefreshToken(ctx context.Context, _a1 *dto.RefreshTokenDTO) (dto.RefreshTokenResponseDTO, status.Object) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 dto.RefreshTokenResponseDTO
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RefreshTokenDTO) (dto.RefreshTokenResponseDTO, status.Object)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RefreshTokenDTO) dto.RefreshTokenResponseDTO); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(dto.RefreshTokenResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.RefreshTokenDTO) status.Object); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// CredentialMock_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type CredentialMock_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *dto.RefreshTokenDTO
func (_e *CredentialMock_Expecter) RefreshToken(ctx interface{}, _a1 interface{}) *CredentialMock_RefreshToken_Call {
	return &CredentialMock_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, _a1)}
}

func (_c *CredentialMock_RefreshToken_Call) Run(run func(ctx context.Context, _a1 *dto.RefreshTokenDTO)) *CredentialMock_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.RefreshTokenDTO))
	})
	return _c
}

func (_c *CredentialMock_RefreshToken_Call) Return(_a0 dto.RefreshTokenResponseDTO, _a1 status.Object) *CredentialMock_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialMock_RefreshToken_Call) RunAndReturn(run func(context.Context, *dto.RefreshTokenDTO) (dto.RefreshTokenResponseDTO, status.Object)) *CredentialMock_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, _a1
func (_m *CredentialMock) Register(ctx context.Context, _a1 *dto.RegisterDTO) status.Object {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RegisterDTO) status.Object); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// CredentialMock_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type CredentialMock_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *dto.RegisterDTO
func (_e *CredentialMock_Expecter) Register(ctx interface{}, _a1 interface{}) *CredentialMock_Register_Call {
	return &CredentialMock_Register_Call{Call: _e.mock.On("Register", ctx, _a1)}
}

func (_c *CredentialMock_Register_Call) Run(run func(ctx context.Context, _a1 *dto.RegisterDTO)) *CredentialMock_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.RegisterDTO))
	})
	return _c
}

func (_c *CredentialMock_Register_Call) Return(_a0 status.Object) *CredentialMock_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CredentialMock_Register_Call) RunAndReturn(run func(context.Context, *dto.RegisterDTO) status.Object) *CredentialMock_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewCredentialMock creates a new instance of CredentialMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCredentialMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CredentialMock {
	mock := &CredentialMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
