// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "nexa/services/authentication/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	repo "nexa/shared/util/repo"

	types "nexa/shared/types"
)

// TokenMock is an autogenerated mock type for the IToken type
type TokenMock struct {
	mock.Mock
}

type TokenMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenMock) EXPECT() *TokenMock_Expecter {
	return &TokenMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, token
func (_m *TokenMock) Create(ctx context.Context, token *entity.Token) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Token) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TokenMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - token *entity.Token
func (_e *TokenMock_Expecter) Create(ctx interface{}, token interface{}) *TokenMock_Create_Call {
	return &TokenMock_Create_Call{Call: _e.mock.On("Create", ctx, token)}
}

func (_c *TokenMock_Create_Call) Run(run func(ctx context.Context, token *entity.Token)) *TokenMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Token))
	})
	return _c
}

func (_c *TokenMock_Create_Call) Return(_a0 error) *TokenMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenMock_Create_Call) RunAndReturn(run func(context.Context, *entity.Token) error) *TokenMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, token
func (_m *TokenMock) Delete(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type TokenMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *TokenMock_Expecter) Delete(ctx interface{}, token interface{}) *TokenMock_Delete_Call {
	return &TokenMock_Delete_Call{Call: _e.mock.On("Delete", ctx, token)}
}

func (_c *TokenMock_Delete_Call) Run(run func(ctx context.Context, token string)) *TokenMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TokenMock_Delete_Call) Return(_a0 error) *TokenMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenMock_Delete_Call) RunAndReturn(run func(context.Context, string) error) *TokenMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByUserId provides a mock function with given fields: ctx, userId
func (_m *TokenMock) DeleteByUserId(ctx context.Context, userId types.Id) error {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUserId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Id) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenMock_DeleteByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUserId'
type TokenMock_DeleteByUserId_Call struct {
	*mock.Call
}

// DeleteByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId types.Id
func (_e *TokenMock_Expecter) DeleteByUserId(ctx interface{}, userId interface{}) *TokenMock_DeleteByUserId_Call {
	return &TokenMock_DeleteByUserId_Call{Call: _e.mock.On("DeleteByUserId", ctx, userId)}
}

func (_c *TokenMock_DeleteByUserId_Call) Run(run func(ctx context.Context, userId types.Id)) *TokenMock_DeleteByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Id))
	})
	return _c
}

func (_c *TokenMock_DeleteByUserId_Call) Return(_a0 error) *TokenMock_DeleteByUserId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenMock_DeleteByUserId_Call) RunAndReturn(run func(context.Context, types.Id) error) *TokenMock_DeleteByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, token
func (_m *TokenMock) Find(ctx context.Context, token string) (entity.Token, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 entity.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Token, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Token); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(entity.Token)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenMock_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type TokenMock_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *TokenMock_Expecter) Find(ctx interface{}, token interface{}) *TokenMock_Find_Call {
	return &TokenMock_Find_Call{Call: _e.mock.On("Find", ctx, token)}
}

func (_c *TokenMock_Find_Call) Run(run func(ctx context.Context, token string)) *TokenMock_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TokenMock_Find_Call) Return(_a0 entity.Token, _a1 error) *TokenMock_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenMock_Find_Call) RunAndReturn(run func(context.Context, string) (entity.Token, error)) *TokenMock_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, parameter
func (_m *TokenMock) Get(ctx context.Context, parameter repo.QueryParameter) (repo.PaginatedResult[entity.Token], error) {
	ret := _m.Called(ctx, parameter)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 repo.PaginatedResult[entity.Token]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.QueryParameter) (repo.PaginatedResult[entity.Token], error)); ok {
		return rf(ctx, parameter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.QueryParameter) repo.PaginatedResult[entity.Token]); ok {
		r0 = rf(ctx, parameter)
	} else {
		r0 = ret.Get(0).(repo.PaginatedResult[entity.Token])
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.QueryParameter) error); ok {
		r1 = rf(ctx, parameter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TokenMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - parameter repo.QueryParameter
func (_e *TokenMock_Expecter) Get(ctx interface{}, parameter interface{}) *TokenMock_Get_Call {
	return &TokenMock_Get_Call{Call: _e.mock.On("Get", ctx, parameter)}
}

func (_c *TokenMock_Get_Call) Run(run func(ctx context.Context, parameter repo.QueryParameter)) *TokenMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo.QueryParameter))
	})
	return _c
}

func (_c *TokenMock_Get_Call) Return(_a0 repo.PaginatedResult[entity.Token], _a1 error) *TokenMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenMock_Get_Call) RunAndReturn(run func(context.Context, repo.QueryParameter) (repo.PaginatedResult[entity.Token], error)) *TokenMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenMock creates a new instance of TokenMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenMock {
	mock := &TokenMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
