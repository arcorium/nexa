// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: credential.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Credential_Login_FullMethodName          = "/services.authentication.schema.proto.v1.Credential/Login"
	Credential_Register_FullMethodName       = "/services.authentication.schema.proto.v1.Credential/Register"
	Credential_RefreshToken_FullMethodName   = "/services.authentication.schema.proto.v1.Credential/RefreshToken"
	Credential_GetCredentials_FullMethodName = "/services.authentication.schema.proto.v1.Credential/GetCredentials"
	Credential_Logout_FullMethodName         = "/services.authentication.schema.proto.v1.Credential/Logout"
	Credential_LogoutAll_FullMethodName      = "/services.authentication.schema.proto.v1.Credential/LogoutAll"
)

// CredentialClient is the client API for Credential service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialClient interface {
	Login(ctx context.Context, in *LoginInput, opts ...grpc.CallOption) (*LoginOutput, error)
	Register(ctx context.Context, in *RegisterInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RefreshToken(ctx context.Context, in *RefreshTokenInput, opts ...grpc.CallOption) (*RefreshTokenOutput, error)
	GetCredentials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCredentialsOutput, error)
	Logout(ctx context.Context, in *LogoutInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LogoutAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type credentialClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialClient(cc grpc.ClientConnInterface) CredentialClient {
	return &credentialClient{cc}
}

func (c *credentialClient) Login(ctx context.Context, in *LoginInput, opts ...grpc.CallOption) (*LoginOutput, error) {
	out := new(LoginOutput)
	err := c.cc.Invoke(ctx, Credential_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialClient) Register(ctx context.Context, in *RegisterInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Credential_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialClient) RefreshToken(ctx context.Context, in *RefreshTokenInput, opts ...grpc.CallOption) (*RefreshTokenOutput, error) {
	out := new(RefreshTokenOutput)
	err := c.cc.Invoke(ctx, Credential_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialClient) GetCredentials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCredentialsOutput, error) {
	out := new(GetCredentialsOutput)
	err := c.cc.Invoke(ctx, Credential_GetCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialClient) Logout(ctx context.Context, in *LogoutInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Credential_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialClient) LogoutAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Credential_LogoutAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredentialServer is the server API for Credential service.
// All implementations must embed UnimplementedCredentialServer
// for forward compatibility
type CredentialServer interface {
	Login(context.Context, *LoginInput) (*LoginOutput, error)
	Register(context.Context, *RegisterInput) (*emptypb.Empty, error)
	RefreshToken(context.Context, *RefreshTokenInput) (*RefreshTokenOutput, error)
	GetCredentials(context.Context, *emptypb.Empty) (*GetCredentialsOutput, error)
	Logout(context.Context, *LogoutInput) (*emptypb.Empty, error)
	LogoutAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedCredentialServer()
}

// UnimplementedCredentialServer must be embedded to have forward compatible implementations.
type UnimplementedCredentialServer struct {
}

func (UnimplementedCredentialServer) Login(context.Context, *LoginInput) (*LoginOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCredentialServer) Register(context.Context, *RegisterInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCredentialServer) RefreshToken(context.Context, *RefreshTokenInput) (*RefreshTokenOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedCredentialServer) GetCredentials(context.Context, *emptypb.Empty) (*GetCredentialsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentials not implemented")
}
func (UnimplementedCredentialServer) Logout(context.Context, *LogoutInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedCredentialServer) LogoutAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutAll not implemented")
}
func (UnimplementedCredentialServer) mustEmbedUnimplementedCredentialServer() {}

// UnsafeCredentialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialServer will
// result in compilation errors.
type UnsafeCredentialServer interface {
	mustEmbedUnimplementedCredentialServer()
}

func RegisterCredentialServer(s grpc.ServiceRegistrar, srv CredentialServer) {
	s.RegisterService(&Credential_ServiceDesc, srv)
}

func _Credential_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Credential_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServer).Login(ctx, req.(*LoginInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credential_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Credential_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServer).Register(ctx, req.(*RegisterInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credential_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Credential_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServer).RefreshToken(ctx, req.(*RefreshTokenInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credential_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServer).GetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Credential_GetCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServer).GetCredentials(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credential_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Credential_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServer).Logout(ctx, req.(*LogoutInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credential_LogoutAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServer).LogoutAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Credential_LogoutAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServer).LogoutAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Credential_ServiceDesc is the grpc.ServiceDesc for Credential service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Credential_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.authentication.schema.proto.v1.Credential",
	HandlerType: (*CredentialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Credential_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Credential_Register_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Credential_RefreshToken_Handler,
		},
		{
			MethodName: "GetCredentials",
			Handler:    _Credential_GetCredentials_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Credential_Logout_Handler,
		},
		{
			MethodName: "LogoutAll",
			Handler:    _Credential_LogoutAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credential.proto",
}
